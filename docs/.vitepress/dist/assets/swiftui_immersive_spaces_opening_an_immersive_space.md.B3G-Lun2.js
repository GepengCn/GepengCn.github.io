import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.C7sZLB-2.js";const g=JSON.parse('{"title":"Opening an immersive space","description":"","frontmatter":{},"headers":[],"relativePath":"swiftui/immersive_spaces/opening_an_immersive_space.md","filePath":"swiftui/immersive_spaces/opening_an_immersive_space.md","lastUpdated":1714623054000}'),e={name:"swiftui/immersive_spaces/opening_an_immersive_space.md"},p=n(`<h1 id="opening-an-immersive-space" tabindex="-1">Opening an immersive space <a class="header-anchor" href="#opening-an-immersive-space" aria-label="Permalink to &quot;Opening an immersive space&quot;">​</a></h1><h2 id="openimmersivespaceaction" tabindex="-1"><code>OpenImmersiveSpaceAction</code> <a class="header-anchor" href="#openimmersivespaceaction" aria-label="Permalink to &quot;\`OpenImmersiveSpaceAction\`&quot;">​</a></h2><p>呈现沉浸式空间的操作。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> OpenImmersiveSpaceAction</span></span></code></pre></div><p>使用 <code>openImmersiveSpace</code> 环境值来获取给定环境的此结构的实例。</p><p>然后调用实例呈现一个空间。</p><p>你可以直接调用该实例，因为它定义了 <code>callAsFunction()</code> 方法，当你调用该实例时，Swift 会调用该方法。</p><p>例如，你可以定义一个在沉浸式空间中打开指定星球的按钮：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> SolarSystemApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Scene {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        ImmersiveSpace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Planet.ID.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { $planetID </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ShowPlanetButton</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> planet: Planet</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.openImmersiveSpace) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> openImmersiveSpace</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Show </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(planet.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> openImmersiveSpace</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: planet.ID)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以通过以下任一方式指定要打开的沉浸式空间：</p><ul><li>通过 <code>id</code> 参数传递一个字符串标识符。</li><li>通过一个与空间初始化器中指定的类型相匹配的 <code>value</code> 参数，正如上面的例子所示。</li><li>同时提供标识符和值。这使你能够定义多个接受相同类型输入值的空间，并通过它们的字符串标识符来区分它们。</li></ul><p>此调用是异步的，会在展示空间后或出现错误时返回。你可以通过检查调用的返回值来检查错误，返回值的类型为 <code>OpenImmersiveSpaceAction.Result</code>。例如，如果你已经有一个沉浸式空间开启了，调用将返回错误，因为系统一次只允许开启一个空间。</p><p>如果在打开空间时提供了一个值，场景的尾随闭包会接收到一个绑定到你提供的值的绑定。为了获得最佳性能，使用轻量级数据作为展示值。对于符合 <code>Identifiable</code> 的结构化模型值，值的标识符作为展示值是一个不错的选择，就像上述代码中的 <code>planet.ID</code> 值一样。</p>`,13),t=[p];function l(h,k,r,d,E,c){return a(),i("div",null,t)}const m=s(e,[["render",l]]);export{g as __pageData,m as default};
