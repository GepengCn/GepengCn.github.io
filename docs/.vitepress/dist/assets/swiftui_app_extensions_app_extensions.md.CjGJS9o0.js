import{_ as i,c as s,o as a,a4 as e}from"./chunks/framework.C7sZLB-2.js";const E=JSON.parse('{"title":"App extensions","description":"","frontmatter":{},"headers":[],"relativePath":"swiftui/app_extensions/app_extensions.md","filePath":"swiftui/app_extensions/app_extensions.md","lastUpdated":1714970771000}'),t={name:"swiftui/app_extensions/app_extensions.md"},n=e(`<h1 id="app-extensions" tabindex="-1">App extensions <a class="header-anchor" href="#app-extensions" aria-label="Permalink to &quot;App extensions&quot;">​</a></h1><p>将应用的基本功能扩展到系统的其他部分，比如通过添加 <code>widgets</code> 。</p><p>小组件为用户提供从你的应用快速访问相关内容的途径。你需要定义一个遵循 <code>Widget</code> 协议的结构，并为小组件声明一个视图层级。像配置其他 SwiftUI 视图一样，使用视图修饰符（包括一些特定于小组件的修饰符）来配置小组件内的视图。</p><h2 id="widget" tabindex="-1"><code>Widget</code> <a class="header-anchor" href="#widget" aria-label="Permalink to &quot;\`Widget\`&quot;">​</a></h2><p>在主屏幕或通知中心上显示的 <code>widgets</code> 的配置和内容。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Widget</span></span></code></pre></div><p><code>widgets</code> 直接在 iOS 主屏幕上或 macOS 的通知中心显示来自你应用的一览式和相关内容。用户可以根据个人需求添加、配置和排列 <code>widgets</code> 。你可以提供多种类型的 <code>widgets</code> ，每种展示特定种类的信息。当用户想要更多信息时，比如阅读新闻标题的全文或查看包裹递送的详细信息， <code>widgets</code> 可让他们快速跳转到应用中的相关信息。</p><p><code>widgets</code> 的三个关键组成部分包括：</p><ul><li>配置信息，用于确定 <code>widgets</code> 是否可配置，标识 <code>widgets</code> ，并定义展示 <code>widgets</code> 内容的 SwiftUI 视图。</li><li>时间线提供者，驱动 <code>widgets</code> 视图随时间更新的过程。</li><li><code>WidgetKit</code> 用于展示 <code>widgets</code> 的 SwiftUI 视图。</li></ul><p>通过添加自定义的 <code>SiriKit</code> 意图定义，你可以让用户自定义他们的小组件以展示与他们最相关的信息。如果你已经为 <code>Siri</code> 或快捷指令添加了支持，那么你就已经在支持可定制小组件的道路上走了很远。</p><h2 id="widgetbundle" tabindex="-1"><code>WidgetBundle</code> <a class="header-anchor" href="#widgetbundle" aria-label="Permalink to &quot;\`WidgetBundle\`&quot;">​</a></h2><p>一个用于从单个窗口 <code>widgets</code> 扩展中展示多个窗口 <code>widgets</code> 的容器。</p><p>为了支持多种类型的小组件，向遵循 <code>WidgetBundle</code> 协议的结构体添加 <code>@main</code> 属性。</p><p>例如，一个游戏可能有一个小组件用于显示游戏的概要信息，另一个小组件则用于展示单个角色的详细信息。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GameWidgets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WidgetBundle </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Widget {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        GameStatusWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        CharacterDetailWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="widgetbundlebuilder" tabindex="-1"><code>WidgetBundleBuilder</code> <a class="header-anchor" href="#widgetbundlebuilder" aria-label="Permalink to &quot;\`WidgetBundleBuilder\`&quot;">​</a></h2><p>一个自定义属性，用于构建 <code>widgets</code> 包的主体。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@resultBuilder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WidgetBundleBuilder</span></span></code></pre></div><p>使用 <code>@WidgetBundleBuilder</code> 属性来组合 <code>widget bundle</code> 的 <code>body</code> 属性中列出的多个 <code>widgets</code>。例如，以下代码定义了一个由两个 <code>widgets</code> 组成的 <code>widget bundle</code>。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GameWidgets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">WidgetBundle </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @WidgetBundleBuilder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Widget {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        GameStatusWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        CharacterDetailWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="limitedavailabilityconfiguration" tabindex="-1"><code>LimitedAvailabilityConfiguration</code> <a class="header-anchor" href="#limitedavailabilityconfiguration" aria-label="Permalink to &quot;\`LimitedAvailabilityConfiguration\`&quot;">​</a></h2><p>一种类型擦除的窗口 <code>widgets</code> 配置。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@frozen</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LimitedAvailabilityConfiguration</span></span></code></pre></div><p>你不会直接使用这种类型。相反，SwiftUI 会代表你创建这种类型。</p><h2 id="widgetlabel" tabindex="-1"><code>widgetLabel(_:)</code> <a class="header-anchor" href="#widgetlabel" aria-label="Permalink to &quot;\`widgetLabel(_:)\`&quot;">​</a></h2><p>返回一个文本标签，该标签在辅助部件家族 <code>widget</code> 的主 SwiftUI 视图之外显示额外内容。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> widgetLabel</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label: S) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> StringProtocol</span></span></code></pre></div><p>为了给配件家族 <code>widgets</code> 添加文本标签，需要在 <code>widgets</code> 的主要 SwiftUI 视图上调用此方法，并传入一个受支持的 <code>LocalizedStringKey</code>。系统将判断是否可以使用该文本标签。如果无法使用，它将忽略该标签。系统还会设置标签的大小、位置和样式，例如设置字体以及沿曲线渲染文本。</p><p>以下 <code>widgets</code> 家族支持文本附件标签：</p><ul><li><code>WidgetFamily.accessoryCorner</code> 类型的 <code>widgets</code> 可以在其内角边缘显示弯曲的文本标签。向配件角 <code>widgets</code> 添加标签会导致主 SwiftUI 视图缩小以腾出空间给标签。</li><li>在 watchOS 中，<code>WidgetFamily.accessoryCircular</code> 类型的 <code>widgets</code> 可以显示文本标签；然而，<code>WidgetKit</code> 只会在 <code>Infograph</code> 手表表盘（顶部圆形复杂功能区）的表圈上渲染该标签。</li></ul><h2 id="widgetaccentable" tabindex="-1"><code>widgetAccentable(_:)</code> <a class="header-anchor" href="#widgetaccentable" aria-label="Permalink to &quot;\`widgetAccentable(_:)\`&quot;">​</a></h2><p>将视图及其所有子视图添加到强调组中。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> widgetAccentable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accentable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View</span></span></code></pre></div><p>当系统采用 <code>WidgetKit</code> 中的 <code>WidgetRenderingMode/accented</code> 模式渲染 <code>widgets</code> 时，它会将 <code>widgets</code> 的视图层级划分为两个组：强调组（ <code>accented group</code> ）与默认组（ <code>default group</code> ）。之后，系统会分别为这两个组应用不同的颜色。</p><p>在应用颜色时，系统会将 <code>widgets</code> 的视图视为模板图像进行处理，忽略视图本身的颜色属性，而是基于视图的 <code>alpha</code> 通道来呈现新的颜色。</p><p>为了控制视图的外观效果，你可以在视图层级的一部分添加 <code>widgetAccentable(_:)</code> 修饰符。如果 <code>accentable</code> 参数为 <code>true</code>，系统会将该视图及其所有子视图添加到强调组。而所有其他视图则会被放入默认组中。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ar body</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> some </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    VStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MON&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.caption)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">widgetAccentable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;6&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>在对某个视图调用 <code>widgetAccentable(true)</code> 将其移入强调组后，即便对其子视图调用 <code>widgetAccentable(false)</code>，子视图也不会被移回到默认组。</p></div><h2 id="dynamicisland-verticalplacement" tabindex="-1"><code>dynamicIsland(verticalPlacement:)</code> <a class="header-anchor" href="#dynamicisland-verticalplacement" aria-label="Permalink to &quot;\`dynamicIsland(verticalPlacement:)\`&quot;">​</a></h2><p>指定扩展后的 <code>Live Activity</code> 在灵动岛中显示的视图的垂直位置。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> dynamicIsland</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">verticalPlacement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: DynamicIslandExpandedRegionVerticalPlacement) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View</span></span></code></pre></div>`,41),l=[n];function d(p,h,k,c,o,g){return a(),s("div",null,l)}const y=i(t,[["render",d]]);export{E as __pageData,y as default};
