import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.C7sZLB-2.js";const n="/gepengcn.github.io/assets/Wrap.BDSTn5sJ.png",e="/gepengcn.github.io/assets/Indentation.zkRYANeN.png",l="/gepengcn.github.io/assets/SubStringMemory.CgNW9PTm.png",u=JSON.parse('{"title":"字符串和字符","description":"","frontmatter":{},"headers":[],"relativePath":"swift/string.md","filePath":"swift/string.md","lastUpdated":1714110236000}'),h={name:"swift/string.md"},p=t(`<h1 id="字符串和字符" tabindex="-1">字符串和字符 <a class="header-anchor" href="#字符串和字符" aria-label="Permalink to &quot;字符串和字符&quot;">​</a></h1><iframe style="border:none;" width="100%" height="450" src="https://whimsical.com/embed/3qocuAP4bXRcDLirztX7Rj"></iframe><h2 id="字符串字面量" tabindex="-1">字符串字面量 <a class="header-anchor" href="#字符串字面量" aria-label="Permalink to &quot;字符串字面量&quot;">​</a></h2><p>字符串字面量是由一对双引号（<code>&quot;</code>）包围的一组固定顺序的字符。</p><p>字符串字面量可以用于为常量和变量提供初始值：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> someString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Some string literal value&quot;</span></span></code></pre></div><h3 id="多行字符串字面量" tabindex="-1">多行字符串字面量 <a class="header-anchor" href="#多行字符串字面量" aria-label="Permalink to &quot;多行字符串字面量&quot;">​</a></h3><p>如果你需要一个字符串是跨越多行的，那就使用「多行字符串字面量」，由一对三个双引号（<code>&quot;&quot;&quot;</code>）包裹着的具有固定顺序的字符集：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">The White Rabbit put on his spectacles.  &quot;Where shall I begin,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">please your Majesty?&quot; he asked.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Begin at the beginning,&quot; the King said gravely, &quot;and go on</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">till you come to the end; then stop.&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><p>字符串内容从第一个（<code>&quot;&quot;&quot;</code>）的<strong>下一行开始</strong>，并在遇到第二个（<code>&quot;&quot;&quot;</code>）<strong>之前的那一行结束</strong>。</p><details class="details custom-block"><summary>编码时换行</summary><p>默认情况下，每一行都会在字符串中自动添加一个换行符。这意味着，如果你按如下方式编写代码：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> speech </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Hello,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">world!</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><p><code>Hello,</code> 和 <code>world!</code> 之间会有一个<strong>换行</strong>，显示为：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Hello,</span></span>
<span class="line"><span>world!</span></span></code></pre></div><p>但是，如果你只是想在「 <code>Xcode</code> 中编码时」<strong>为了代码展示清晰而换行</strong>，实际上并不希望这些代码行间的换行出现在字符串的结果中，你可以在每一行的末尾加上一个反斜杠（ <code>\\</code> ）。这个反斜杠告诉 Swift 编译器忽略它后面的换行符。</p><p>例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> speech </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Hello,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    world!</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><p>这时，<code>speech</code> 的输出结果会是：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Hello, world!</span></span></code></pre></div><p>这里，最终的输出结果不包括换行。</p></details><h3 id="首尾添加换行符" tabindex="-1">首尾添加换行符 <a class="header-anchor" href="#首尾添加换行符" aria-label="Permalink to &quot;首尾添加换行符&quot;">​</a></h3><p>如果你想让字符串实际的内容以换行符<strong>开始</strong>和<strong>结束</strong>，你需要在多行字符串的第一行和最后一行单独放置换行符。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> lineBreaks </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">This string starts with a line break.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">It also ends with a line break.</span></span>
<span class="line highlighted"><wbr></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;</span></span></code></pre></div><p>当你打印 <code>lineBreaks</code> 时，它的输出会在开始前和结束后各有一个额外的空行。</p><p><img src="`+n+`" alt="换行"></p><h3 id="添加缩进" tabindex="-1">添加缩进 <a class="header-anchor" href="#添加缩进" aria-label="Permalink to &quot;添加缩进&quot;">​</a></h3><p>Swift 允许你对多行字符串字面量进行缩进，以使它们在代码中的外观更加整洁。多行字符串的<strong>缩进</strong>方式是基于<strong>结尾</strong>三个引号（ <code>&quot;&quot;&quot;</code> ）的<strong>位置</strong>来确定的。</p><p>例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;&quot;</span></span>
<span class="line diff remove"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    This line is aligned with the closing quotes.</span></span>
<span class="line diff add"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        This line is indented more than the closing quotes.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &quot;&quot;&quot;</span></span></code></pre></div><p><img src="`+e+`" alt="缩进"></p><h3 id="字符串字面量的特殊字符" tabindex="-1">字符串字面量的特殊字符 <a class="header-anchor" href="#字符串字面量的特殊字符" aria-label="Permalink to &quot;字符串字面量的特殊字符&quot;">​</a></h3><p>字符串字面量可以包含以下特殊字符：</p><ul><li><code>\\0</code> 表示空字符</li><li><code>\\\\</code> 表示反斜线本身</li><li><code>\\t</code> 表示水平制表符（相当于一个<code>Tab</code>缩进）</li><li><code>\\n</code> 表示换行符</li><li><code>\\r</code> 表示回车符</li><li><code>\\&quot;</code> 表示双引号（用于在字符串内部表示双引号）</li><li><code>\\&#39;</code> 表示单引号（通常在字符串中不需要转义，除非用于字符字面量）</li></ul><p>Unicode 标量使用 <code>\\u{n}</code> 的形式表示，其中 <code>n</code> 是一个一到八位的十六进制数，表示 Unicode 字符的代码点。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> wiseWords </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Imagination is more important than knowledge</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> - Einstein&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Imagination is more important than knowledge&quot; - Einstein</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dollarSign </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{24}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">             // $，Unicode 标量 U+0024</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> blackHeart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{2665}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // ♥，Unicode 标量 U+2665</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sparklingHeart </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{1F496}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 💖，Unicode 标量 U+1F496</span></span></code></pre></div><h2 id="扩展分隔符" tabindex="-1">扩展分隔符 <a class="header-anchor" href="#扩展分隔符" aria-label="Permalink to &quot;扩展分隔符&quot;">​</a></h2><p>在 Swift 中，你可以使用扩展分隔符来使得字符串中的「转义字符」被看作「普通字符」。这是通过在字符串的双引号外面添加符号对称的 <code>#</code> 来实现的。例如，如果你使用如下方式编写字符串：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> #&quot;Line 1 \\nLine 2&quot;#</span></span></code></pre></div><p>这个字符串会原样输出 <code>Line 1 \\nLine 2</code>，其中 <code>\\n</code> 不会被解释为换行符，而是作为普通文本的一部分。</p><p>如果你希望在使用扩展分隔符的同时保持转义字符的特殊效果，你需要在转义符（<code>\\</code>）后添加<code>#</code> 符号。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// \\n --&gt; \\#n</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> #&quot;Line 1 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\#n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Line 2&quot;#</span></span></code></pre></div><p>同样地，如果你使用了多个 <code>#</code> 来作为扩展分隔符，你需要在转义符后添加<strong>同样数量</strong>的 <code>#</code>。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> example </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ###&quot;Line 1 \\###nLine 2&quot;###</span></span></code></pre></div><p>此外，扩展分隔符也可以用于多行字符串字面量。如下所示：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multilineString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> #&quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-dark:#FDAEB7;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Here is a string that includes triple quotes (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;) inside.</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;&quot;#</span></span></code></pre></div><p>这样，即使字符串内部包含三个双引号，它们也会被视为普通文本的一部分，而不会结束字符串。</p><h2 id="初始化空字符串" tabindex="-1">初始化空字符串 <a class="header-anchor" href="#初始化空字符串" aria-label="Permalink to &quot;初始化空字符串&quot;">​</a></h2><p>要创建一个空的字符串，你可以直接使用空字符串字面量或者初始化一个新的 <code>String</code> 实例：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emptyString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // 使用空字符串字面量</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> anotherEmptyString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用初始化方法</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 这两个字符串都是空的，并且它们是等价的。</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(emptyString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> anotherEmptyString) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// true</span></span></code></pre></div><p>要检查一个字符串<strong>是否为空</strong>，可以使用 <code>isEmpty</code> 属性，它返回一个布尔值：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> emptyString.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isEmpty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Nothing to see here&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 将会打印：&quot;Nothing to see here&quot;</span></span></code></pre></div><h2 id="字符串可变性" tabindex="-1">字符串可变性 <a class="header-anchor" href="#字符串可变性" aria-label="Permalink to &quot;字符串可变性&quot;">​</a></h2><p>在 Swift 中，你可以通过将字符串分配给变量或常量来控制这个字符串是否可以被修改：</p><ul><li><p><strong>变量</strong>（使用 <code>var</code> 关键字）: 这样定义的字符串可以在以后被修改。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark has-diff vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello&quot;</span></span>
<span class="line diff add"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 可以修改变量的值</span></span></code></pre></div></li><li><p><strong>常量</strong>（使用 <code>let</code> 关键字）: 这样定义的字符串一旦设定后就不能被修改。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> farewell </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Goodbye&quot;</span></span>
<span class="line highlighted error"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// farewell = &quot;See you later&quot;  // 尝试修改会引发编译错误</span></span></code></pre></div></li></ul><h2 id="字符串是值类型" tabindex="-1">字符串是值类型 <a class="header-anchor" href="#字符串是值类型" aria-label="Permalink to &quot;字符串是值类型&quot;">​</a></h2><p><code>String</code> 类型是一个值类型，这有几个关键点需要理解：</p><ol><li><p><strong>值类型的行为</strong>：与引用类型不同，值类型在赋给新的变量、常量，或者在函数和方法中传递时，会创建原始数据的一个拷贝。这意味着每次你操作字符串时，你实际上是在操作一个新的副本，而不是原始字符串。</p></li><li><p><strong>所有权和修改</strong>：由于字符串被拷贝，所以函数或方法接收的字符串是独立于原始字符串的。这种行为确保了传递给函数的原字符串不会被外部篡改。</p></li><li><p><strong>编译器优化</strong>：虽然值类型通常会涉及很多数据拷贝，但 Swift 编译器会进行智能优化。它尽可能地推迟拷贝操作，直到真正需要修改数据时才执行拷贝。这种优化被称为「写时复制」（Copy-on-Write），它帮助提高性能，使得即便是值类型的字符串也能高效地使用，因为不是每次操作都会触发实际的数据拷贝。</p></li></ol><h2 id="使用字符" tabindex="-1">使用字符 <a class="header-anchor" href="#使用字符" aria-label="Permalink to &quot;使用字符&quot;">​</a></h2><p>在 Swift 中，你可以使用 <code>for-in</code> 循环来遍历字符串的每一个字符。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> character </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dog!🐶&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(character)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// D</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// o</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// g</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// !</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 🐶</span></span></code></pre></div><p>此外，你也可以创建一个独立的字符常量或变量，只需指定类型为 <code>Character</code> 并使用字符字面量进行赋值：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exclamationMark: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;!&quot;</span></span></code></pre></div><p>如果你想将一系列字符<strong>转换</strong>为一个字符串，可以将一个类型为 <code>Character</code> 的数组传递给 <code>String</code> 的初始化器：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> catCharacters: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Character</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;C&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;t&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;🐱&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> catString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(catCharacters)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(catString)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印输出：“Cat!🐱”</span></span></code></pre></div><h2 id="连接字符串和字符" tabindex="-1">连接字符串和字符 <a class="header-anchor" href="#连接字符串和字符" aria-label="Permalink to &quot;连接字符串和字符&quot;">​</a></h2><p>字符串可以通过加法运算符（ <code>+</code> ）相加在一起（连接）创建一个新的字符串：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot; there&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> welcome </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// welcome 现在等于 &quot;hello there&quot;</span></span></code></pre></div><p>你也可以通过加法赋值运算符（ <code>+=</code> ）将一个字符串添加到一个已经存在字符串变量上：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> instruction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;look over&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">instruction </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> string2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// instruction 现在等于 &quot;look over there&quot;</span></span></code></pre></div><p>你可以用 <code>append()</code> 方法将一个字符附加到一个字符串变量的尾部：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> exclamationMark: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;!&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(exclamationMark)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// welcome 现在等于 &quot;hello there!&quot;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>字符类型 <code>Character</code> 的变量或常量只能包含单个字符。因此，你不能将一个字符串或另一个字符添加到已经存在的字符变量上。</p></div><h2 id="字符串插值" tabindex="-1">字符串插值 <a class="header-anchor" href="#字符串插值" aria-label="Permalink to &quot;字符串插值&quot;">​</a></h2><p>字符串插值允许你将常量、变量、字面量和表达式<strong>嵌入</strong>到其它字符串中。无论是单行还是多行的字符串字面量，都可以使用字符串插值。要进行插值，你需要将要插入的项放在反斜线（ <code>\\</code> ）后面跟随一对圆括号（<code>()</code>）中，例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> multiplier </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> message </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(multiplier)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> times 2.5 is 7.5)&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// message 是 &quot;3 times 2.5 is 7.5&quot;</span></span></code></pre></div><p><code>\\(multiplier)</code> 将 <code>multiplier</code> 的值插入到字符串 <code>message</code> 中。</p><h2 id="unicode" tabindex="-1">Unicode <a class="header-anchor" href="#unicode" aria-label="Permalink to &quot;Unicode&quot;">​</a></h2><p>Unicode是一个用于在不同书写系统中对文本进行编码、表示和处理的国际标准。它使你可以用标准格式表示来自任意语言几乎所有的字符，并能够对文本文件或网页这样的外部资源中的字符进行读写操作。Swift 的 <code>String</code> 和 <code>Character</code> 类型是完全兼容 Unicode 标准的。</p><h3 id="unicode-标量" tabindex="-1">Unicode 标量 <a class="header-anchor" href="#unicode-标量" aria-label="Permalink to &quot;Unicode 标量&quot;">​</a></h3><p><code>String</code> 类型是基于 Unicode 标量建立的。Unicode 标量是用来唯一表示字符或修饰符的 <code>21</code> 位数字码点。这些码点使用十六进制数表示，前面加上 <code>U+</code>。例如，<code>U+0061</code> 表示小写的拉丁字母 <code>a</code>，而 <code>U+1F425</code> 表示一个小鸡的表情符号 <code>🐥</code>。</p><p>已分配的每个码点不仅有一个码值，还有一个官方名称，比如 <code>LATIN SMALL LETTER A</code> 或 <code>FRONT-FACING BABY CHICK</code>，这些名称帮助标识和描述字符。</p><h3 id="可扩展的字形群集" tabindex="-1">可扩展的字形群集 <a class="header-anchor" href="#可扩展的字形群集" aria-label="Permalink to &quot;可扩展的字形群集&quot;">​</a></h3><p>每一个 <code>Character</code> 类型实际上代表的是一个「可扩展的字形群」。这个概念可以看作是组成人类可识别的单个字符的一个或多个 Unicode 标量的<strong>集合</strong>。Unicode 标量是指 Unicode 字符集中的一个具体码点。</p><p>为了更好地理解这一概念，让我们看一个具体的例子：字母 <code>é</code>。</p><ol><li><p><strong>单一标量表示</strong>： 字母 <code>é</code> 可以通过一个单一的 Unicode 标量表示，即 <code>U+00E9</code>，这个标量对应的是 <code>LATIN SMALL LETTER E WITH ACUTE</code>（带急促重音的小写字母 <code>e</code> ）。</p></li><li><p><strong>组合标量表示</strong>： 同样的字母 <code>é</code> 也可以通过两个分开的 Unicode 标量来表示：</p><ul><li><code>U+0065</code> ：代表 <code>LATIN SMALL LETTER E</code>（小写字母 <code>e</code> ）。</li><li><code>U+0301</code> ：代表 <code>COMBINING ACUTE ACCENT</code>（急促重音符号）。</li></ul></li></ol><p>这种情况下，小写字母 <code>e</code> 和急促重音符号组合起来，形成了与单一标量 <code>U+00E9</code> 相同的视觉字符 <code>é</code>。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eAcute: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{E9}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                         // é</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> combinedEAcute: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{65}\\u{301}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // (e) + ( ́) = é</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// eAcute 是 é, combinedEAcute 也是 é</span></span></code></pre></div><details class="details custom-block"><summary>用途和好处</summary><ol><li><p><strong>国际化和本地化</strong>： 由于可扩展字形群可以包含多个 Unicode 标量，Swift 可以支持全球各种语言的复杂字符，包括那些需要重音符号和其他修饰符的字符。这对开发国际化应用程序来说非常重要，可以确保应用在不同语言环境下都能正确显示文本。</p></li><li><p><strong>文本处理的准确性</strong>： 在处理包含多语言文本的应用中，理解和正确处理每个 <code>Character</code> 作为一个完整的字形群是非常重要的。例如，在文本编辑器或处理用户输入的应用程序中，确保光标正确地在字符之间而不是字符内部移动，或者确保文本渲染时保持视觉上的一致性。</p></li><li><p><strong>用户界面设计</strong>： 对于需要精确控制文本显示的界面，了解 <code>Character</code> 的这些特性可以帮助开发者设计更好的用户交互体验。例如，计算字符串的长度时考虑到复杂字符的存在，可以避免布局错误或文本截断问题。</p></li><li><p><strong>数据存储和网络传输</strong>： 在存储或传输文本数据时，了解字符如何由 Unicode 标量组成可以帮助开发者选择更有效的编码和处理策略，尤其是在面对多种语言和字符集时。</p></li><li><p><strong>文本搜索和处理</strong>： 理解可扩展字形群的概念有助于开发更精确的文本搜索和处理工具，如正则表达式匹配，以及更复杂的文本分析和处理任务，确保结果的正确性和相关性。</p></li></ol></details><h2 id="计算字符数量" tabindex="-1">计算字符数量 <a class="header-anchor" href="#计算字符数量" aria-label="Permalink to &quot;计算字符数量&quot;">​</a></h2><p>如果想要<strong>统计</strong>一个字符串的字符<strong>数量</strong>，可以使用 <code>count</code> 属性：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unusualMenagerie </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;unusualMenagerie has </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(unusualMenagerie.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> characters&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印输出“unusualMenagerie has 40 characters”</span></span></code></pre></div><p><code>Character</code> 类型的特性使得字符串的处理方式与其他编程语言有所不同，特别是在处理由多个 Unicode 标量组成的字符时。这个例子很好地展示了这种处理方式：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;cafe&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;the number of characters in </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(word)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(word.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印输出“the number of characters in cafe is 4”</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">word </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{301}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 拼接一个重音，U+0301</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;the number of characters in </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(word)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> is </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(word.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印输出“the number of characters in café is 4”</span></span></code></pre></div><p>这里的关键点是理解 Swift 如何定义字符（<code>Character</code>）：</p><ol><li><p><strong>初始化字符串</strong>：开始时，字符串 <code>word</code> 包含 <code>cafe</code> 四个字母。Swift 认为这四个字母各自是一个 <code>Character</code>，所以字符数为 <code>4</code>。</p></li><li><p><strong>添加组合字符</strong>：当你向字符串 <code>word</code> 添加 Unicode 标量 <code>\\u{301}</code>（重音符号）时，这个符号自动与前一个字符 <code>e</code> 组合，形成了一个新的字符 <code>é</code>。</p></li><li><p><strong>字符串长度不变</strong>：尽管你添加了一个<strong>额外</strong>的 Unicode 标量，但从 Swift 的角度看，你并没有增加一个新的 <code>Character</code>。相反，你只是修改了现有的一个 <code>Character</code>，从 <code>e</code> 变成了 <code>é</code>。因此，即使添加了重音，字符串 <code>word</code> 中的 <code>Character</code> 数量仍然是 <code>4</code>。</p></li></ol><details class="details custom-block"><summary>内存、性能与比较</summary><h3 id="内存使用" tabindex="-1">内存使用 <a class="header-anchor" href="#内存使用" aria-label="Permalink to &quot;内存使用&quot;">​</a></h3><p>由于有些字符是由多个部分组成的，它们占用的内存比单一部分的字符要多。因此，在 Swift 中，字符串中的不同字符可能占用不同的内存空间。</p><h3 id="性能影响" tabindex="-1">性能影响 <a class="header-anchor" href="#性能影响" aria-label="Permalink to &quot;性能影响&quot;">​</a></h3><p>因为要准确地数出一个字符串中的字符数量，Swift 需要检查字符串中每个字符是由多少个部分组成的。对于很长的字符串，这个过程可能需要一些时间。</p><h3 id="swift-与-nsstring" tabindex="-1">Swift 与 <code>NSString</code> <a class="header-anchor" href="#swift-与-nsstring" aria-label="Permalink to &quot;Swift 与 \`NSString\`&quot;">​</a></h3><p>Swift 中的字符串（ <code>String</code> ）和 Objective-C 中的字符串（ <code>NSString</code> ）处理字符的方式不同。<code>NSString</code> 计算字符的方法是基于更旧的编码（ <code>UTF-16</code> ），这种方法可能会错误地把一个由多个部分组成的字符算作两个字符。</p></details><h2 id="访问和修改字符串" tabindex="-1">访问和修改字符串 <a class="header-anchor" href="#访问和修改字符串" aria-label="Permalink to &quot;访问和修改字符串&quot;">​</a></h2><h3 id="字符串索引" tabindex="-1">字符串索引 <a class="header-anchor" href="#字符串索引" aria-label="Permalink to &quot;字符串索引&quot;">​</a></h3><p>每个 <code>String</code> 值都有一个与之关联的索引类型 <code>String.Index</code>，用于标识字符串中每个 <code>Character</code> 的位置。</p><div class="tip custom-block"><p class="custom-block-title">整数索引</p><p>由于不同的字符可能占用不同的内存空间，我们不能直接使用「整数索引」来访问字符串中的字符。要确定任一字符的位置，必须从字符串的开始处遍历每个 Unicode 标量，直到到达该字符的位置。</p></div><ul><li><code>String</code> 提供了 <code>startIndex</code> 属性，用来获取字符串中「<strong>第一个</strong>」字符的索引。</li><li>相应地，<code>endIndex</code> 属性表示的是位于「<strong>最后</strong>」一个字符「<strong>之后</strong>」的位置的索引（它不指向任何有效的字符位置），因此 <code>endIndex</code> 不能作为字符串的有效索引。</li><li>如果字符串为空，<code>startIndex</code> 和 <code>endIndex </code>将会是「<strong>相同</strong>」的。</li><li>你可以通过 <code>index(before:)</code> 和 <code>index(after:)</code> 方法来分别获取给定索引<strong>之前</strong>或<strong>之后</strong>的索引。</li><li>此外，使用 <code>index(_:offsetBy:)</code> 方法可以直接计算出<strong>偏移</strong>后的索引，这可以避免多次调用 <code>index(before:)</code> 或 <code>index(after:)</code>。</li><li>你可以使用下标语法来访问 <code>String</code> 特定索引的 <code>Character</code>。</li></ul><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guten Tag!&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting[greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// G</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting[greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// !</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting[greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// u</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">startIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">offsetBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting[index]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// a</span></span></code></pre></div><p>试图获取越界索引对应的 <code>Character</code>，将引发一个运行时错误。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line highlighted error"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting[greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// error</span></span>
<span class="line highlighted error"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// error</span></span></code></pre></div><p>使用 <code>indices</code> 属性会创建一个包含全部索引的范围（ <code>Range</code> ），用来在一个字符串中遍历单个字符。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">indices</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(greeting[index])</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">terminator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印输出“G u t e n   T a g ! ”</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">提示</p><p>你可以在任何遵循 <code>Collection</code> 协议的类型中使用 <code>startIndex</code> 和 <code>endIndex</code> 属性，以及 <code>index(before:)</code>、<code>index(after:)</code> 和 <code>index(_:offsetBy:)</code> 方法来操作索引。这些方法和属性不仅适用于 <code>String</code>，也同样可以用于 <code>Array</code>、<code>Dictionary</code> 和 <code>Set</code> 等集合类型。</p></div><h3 id="插入和删除" tabindex="-1">插入和删除 <a class="header-anchor" href="#插入和删除" aria-label="Permalink to &quot;插入和删除&quot;">​</a></h3><ul><li>使用 <code>insert(_:at:)</code> 方法可以在字符串的指定索引处插入「单个字符」。</li><li>使用 <code>insert(contentsOf:at:)</code> 方法则可以在指定索引处插入「一段字符串」。</li></ul><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> welcome </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;hello&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// welcome 变量现在等于 &quot;hello!&quot;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contentsOf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot; there&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// welcome 变量现在等于 &quot;hello there!&quot;</span></span></code></pre></div><ul><li>使用 <code>remove(at:)</code> 方法可以删除字符串中指定索引处的「单个字符」。</li><li>使用 <code>removeSubrange(_:)</code> 方法，允许你「指定一个范围」来删除「多个字符」。</li></ul><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">at</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">before</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// welcome 现在等于 &quot;hello there&quot;</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> range </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">offsetBy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">welcome.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">removeSubrange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(range)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// welcome 现在等于 &quot;hello&quot;</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">注意</p><p>你可以在任何遵循 <code>RangeReplaceableCollection</code> 协议的类型中使用 <code>insert(_:at:)</code>、<code>insert(contentsOf:at:)</code>、<code>remove(at:)</code> 和 <code>removeSubrange(_:)</code> 方法。这些方法不仅适用于字符串，也可以用于数组<code>Array</code>。</p><p>然而，需要注意的是，<code>Dictionary</code> 和 <code>Set</code> 不遵循 <code>RangeReplaceableCollection</code> 协议，因此这些方法不适用于这两种类型。</p></div><h2 id="子字符串" tabindex="-1">子字符串 <a class="header-anchor" href="#子字符串" aria-label="Permalink to &quot;子字符串&quot;">​</a></h2><p>当你通过下标或方法如 <code>prefix(_:)</code> 从一个字符串中提取部分内容时，你得到的是一个 <code>Substring</code> 实例，而不是一个新的 <code>String</code>。</p><p><code>Substring</code> 与 <code>String</code> 共享大多数方法，这意味着你可以用相同的方式操作它们。然而，与 <code>String</code> 不同的是，<code>Substring</code> 通常用于临时处理字符串数据。</p><p>如果你打算长期保持这段数据，应该将 <code>Substring</code> 转换成 <code>String</code> 实例，如下例：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">firstIndex</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;,&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">endIndex</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> beginning </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">index]</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// beginning 的值为 &quot;Hello&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 把结果转化为 String 以便长期存储。</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newString </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(beginning)</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title"><code>Substring</code> 与 <code>String</code> 的主要区别</p><p><code>String</code> 和 <code>Substring</code> 的区别在于<strong>性能优化</strong>上，<code>Substring</code> 可以重用原 <code>String</code> 的内存空间，或者另一个 <code>Substring</code> 的内存空间。</p><p>这一优化意味着你在修改 <code>String</code> 和 <code>Substring</code> 之前都不需要消耗性能去复制内存。<code>Substring</code> 不适合长期存储 —— 因为它重用了原 <code>String</code> 的内存空间，原 <code>String</code> 的内存空间必须保留直到它的 <code>Substring</code> 不再被使用为止。</p></div><ul><li>在上面的例子中，<code>greeting</code> 是一个字符串，它有自己独立的内存空间来存储字符。</li><li><code>beginning</code> 是从 <code>greeting</code> 中派生出的一个<strong>子字符串</strong>，因此它重用了 <code>greeting</code> 的内存。</li><li>而 <code>newString</code> 则是由 <code>beginning</code> 转换而来的新字符串，它拥有一片<strong>全新</strong>的内存空间。</li></ul><p>下面的图展示了他们之间的关系：</p><p><img src="`+l+`" alt="SubStringMemory"></p><h2 id="比较字符串" tabindex="-1">比较字符串 <a class="header-anchor" href="#比较字符串" aria-label="Permalink to &quot;比较字符串&quot;">​</a></h2><p>Swift 提供了三种方式来比较文本值：字符串字符相等、前缀相等和后缀相等。</p><h3 id="字符串-字符相等" tabindex="-1">字符串/字符相等 <a class="header-anchor" href="#字符串-字符相等" aria-label="Permalink to &quot;字符串/字符相等&quot;">​</a></h3><p>字符串/字符可以用等于操作符（ <code>==</code> ）和不等于操作符（ <code>!=</code> ）：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;We&#39;re a lot alike, you and I.&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sameQuotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;We&#39;re a lot alike, you and I.&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> quotation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sameQuotation {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;These two strings are considered equal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印输出“These two strings are considered equal”</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><ul><li>如果两个字符串（或两个字符）的可扩展字形群集在标准上是相等的，那么这两个字符串（或字符）就被视为相等。</li><li>这意味着只要这些字形群集在<strong>语言表达</strong>和<strong>视觉外观</strong>上相同，它们就被认为是等同的，即便它们可能由不同的 Unicode 标量组成。</li></ul></div><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Voulez-vous un café?&quot; 使用 LATIN SMALL LETTER E WITH ACUTE</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eAcuteQuestion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Voulez-vous un caf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{E9}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">?&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// &quot;Voulez-vous un café?&quot; 使用 LATIN SMALL LETTER E and COMBINING ACUTE ACCENT</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> combinedEAcuteQuestion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Voulez-vous un caf</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{65}\\u{301}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">?&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> eAcuteQuestion </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> combinedEAcuteQuestion {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;These two strings are considered equal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印输出“These two strings are considered equal”</span></span></code></pre></div><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>相反，英语中的 <code>LATIN CAPITAL LETTER A</code> ( <code>U+0041</code>，或者 <code>A</code> )不等于俄语中的 <code>CYRILLIC CAPITAL LETTER A</code> ( <code>U+0410</code>，或者 <code>A</code> )。两个字符看着是一样的，但却有不同的「<strong>语言表达</strong>」：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latinCapitalLetterA: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{41}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cyrillicCapitalLetterA: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Character</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\u{0410}</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> latinCapitalLetterA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cyrillicCapitalLetterA {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;These two characters are not equivalent&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 打印“These two characters are not equivalent”</span></span></code></pre></div></div><h3 id="前缀-后缀相等" tabindex="-1">前缀/后缀相等 <a class="header-anchor" href="#前缀-后缀相等" aria-label="Permalink to &quot;前缀/后缀相等&quot;">​</a></h3><ul><li>你可以使用 <code>hasPrefix(_:)</code> 和 <code>hasSuffix(_:)</code> 方法来检查一个字符串是否以特定的<strong>前缀</strong>或<strong>后缀</strong>结束。</li><li>这两个方法都接受一个 <code>String</code> 类型的参数，并返回一个布尔值，表示字符串是否包含给定的前缀或后缀。</li></ul><p>假设我们有一个字符串 <code>greeting</code>，我们想检查它是否以某些特定的词组开始或结束：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Hello, world!&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查字符串是否以 &quot;Hello&quot; 开头</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startsWithHello </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasPrefix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Does greeting start with &#39;Hello&#39;? </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(startsWithHello)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Does greeting start with &#39;Hello&#39;? true</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查字符串是否以 &quot;world!&quot; 结尾</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> endsWithWorld </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> greeting.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">hasSuffix</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;world!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Does greeting end with &#39;world!&#39;? </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(endsWithWorld)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：Does greeting end with &#39;world!&#39;? true</span></span></code></pre></div><h2 id="字符串的-unicode-表示形式" tabindex="-1">字符串的 Unicode 表示形式 <a class="header-anchor" href="#字符串的-unicode-表示形式" aria-label="Permalink to &quot;字符串的 Unicode 表示形式&quot;">​</a></h2><p>Swift 提供了三种主要的 Unicode 表示形式，每种形式都适用于不同的用途和需求。</p><h3 id="unicode-标量表示" tabindex="-1">Unicode 标量表示 <a class="header-anchor" href="#unicode-标量表示" aria-label="Permalink to &quot;Unicode 标量表示&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title">INFO</p><p>当一个 Unicode 字符串被<strong>写进文本文件或者其他储存</strong>时，字符串中的 Unicode 标量会用 Unicode 定义的几种<strong>编码格式</strong>编码。</p><p>每一个字符串中的小块编码都被称「代码单元」，这些包括：</p><ul><li><code>UTF-8</code> 编码格式（编码字符串为 <code>8</code> 位的代码单元）</li><li><code>UTF-16</code> 编码格式（编码字符串位 <code>16</code> 位的代码单元）</li><li><code>UTF-32</code> 编码格式（编码字符串 <code>32</code> 位的代码单元）。</li></ul></div><p>Swift 提供了几种不同的方式来访问字符串的 Unicode 表示形式。你可以利用 <code>for-in</code> 来对字符串进行遍历，从而以 Unicode 可扩展的字符群集的方式访问每一个 <code>Character</code> 值。</p><h3 id="utf-8-表示" tabindex="-1">UTF-8 表示 <a class="header-anchor" href="#utf-8-表示" aria-label="Permalink to &quot;UTF-8 表示&quot;">​</a></h3><p>这个视图将字符串表示为 <code>UTF-8</code> 编码的序列。<code>UTF-8</code> 是一种<strong>变长</strong>编码，使用 <code>1</code> 到 <code>4</code> 个字节来表示每个 Unicode 标量。</p><p><code>utf8</code> 属性允许直接访问字符串的 <code>UTF-8</code> 表示。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dog‼🐶&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> byte </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">utf8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(byte)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 68 111 103 226 128 188 240 159 144 182</span></span></code></pre></div><h3 id="utf-16-表示" tabindex="-1">UTF-16 表示 <a class="header-anchor" href="#utf-16-表示" aria-label="Permalink to &quot;UTF-16 表示&quot;">​</a></h3><p>这个视图将字符串表示为 <code>UTF-16</code> 编码的序列。<code>UTF-16</code> 使用 <code>1</code> 到 <code>2</code> 个 <code>16</code> 位的代码单元来表示每个 Unicode 标量。</p><p><code>utf16</code> 属性可以被用来访问字符串的 <code>UTF-16</code> 编码。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dog‼🐶&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> codeUnit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">utf16</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(codeUnit)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 68 111 103 8252 55357 56374</span></span></code></pre></div><h3 id="unicode-标量表示-1" tabindex="-1">Unicode 标量表示 <a class="header-anchor" href="#unicode-标量表示-1" aria-label="Permalink to &quot;Unicode 标量表示&quot;">​</a></h3><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Dog‼🐶&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> scalar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> text.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">unicodeScalars</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(scalar)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：&quot;D o g ‼ 🐶&quot;</span></span></code></pre></div>`,140),k=[p];function d(o,r,c,g,E,y){return a(),i("div",null,k)}const C=s(h,[["render",d]]);export{u as __pageData,C as default};
