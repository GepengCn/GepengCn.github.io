import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.B8OCIuDt.js";const g=JSON.parse('{"title":"基本运算符","description":"","frontmatter":{},"headers":[],"relativePath":"swift/basic_operators.md","filePath":"swift/basic_operators.md"}'),h={name:"swift/basic_operators.md"},t=n(`<h1 id="基本运算符" tabindex="-1">基本运算符 <a class="header-anchor" href="#基本运算符" aria-label="Permalink to &quot;基本运算符&quot;">​</a></h1><iframe style="border:none;" width="100%" height="450" src="https://whimsical.com/embed/Jts7qH6rFWspiCXCndLjVC"></iframe><p>运算符是用于检查、修改或合并值的特殊符号或短语。例如，加号（+）用于将两个数字相加（如：<code>let i = 1 + 2</code>）。更复杂的运算示例包括逻辑与运算符（&amp;&amp;），它在两个条件都满足时返回真（例如：<code>if enteredDoorCode &amp;&amp; passedRetinaScan</code>）。</p><p>Swift 支持的许多运算符在其他语言中也存在，比如 C 语言，但 Swift 对这些运算符进行了改进，以减少常见的编程错误。例如，赋值运算符（=）不再返回任何值，这样可以避免由于将等于运算符（==）误写为赋值运算符而引发的代码错误。算术运算符（如 +、-、*、/、%）会进行值溢出检查，防止因变量超出其数据类型所能承载的范围而产生异常结果。Swift 也允许使用专门的<a href="./senior_operators.html#溢出运算符">溢出运算符</a>来处理值溢出。</p><p>此外，Swift 引入了一些 C 语言中没有的区间运算符，如 <code>a..&lt;b</code> 或 <code>a...b</code>，这使得表示数字范围变得更加方便。</p><p>本章节仅介绍了 Swift 中的基本运算符。在<a href="./senior_operators.html">高级运算符</a>一章中，我们将探讨 Swift 中的高级运算符，包括如何自定义运算符以及如何对自定义类型进行运算符重载。</p><h2 id="术语" tabindex="-1">术语 <a class="header-anchor" href="#术语" aria-label="Permalink to &quot;术语&quot;">​</a></h2><p>运算符根据它们操作的对象数量可以分为一元、二元和三元运算符：</p><p>一元运算符作用于一个操作对象。例如，负号运算符（<code>-a</code>）是一元运算符。一元运算符又分为前置和后置运算符：前置运算符位于操作对象之前（如 <code>!b</code>），而后置运算符位于操作对象之后（如 <code>c!</code>）。</p><p>二元运算符作用于两个操作对象，并位于这两个操作对象之间，因此被称为中置运算符。一个典型的例子是加法运算符，如在表达式 <code>2 + 3</code> 中。</p><p>三元运算符涉及三个操作对象。在 Swift 和 C 语言中，唯一的三元运算符是三目运算符，格式为 <code>a ? b : c</code>，用于根据条件表达式 <code>a</code> 的真假值来选择 <code>b</code> 或 <code>c</code>。</p><p>在表达式 <code>1 + 2</code> 中，加号（+）是一个中置运算符，其两个操作数是数值 1 和 2。</p><h2 id="赋值运算符" tabindex="-1">赋值运算符 <a class="header-anchor" href="#赋值运算符" aria-label="Permalink to &quot;赋值运算符&quot;">​</a></h2><p>赋值运算符（<code>a = b</code>）代表将变量 <code>b</code> 的值分配给变量 <code>a</code>。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在 a 的值是 10</span></span></code></pre></div><p>当赋值操作的右侧是一个元组时，你可以同时将元组的元素解构到多个常量或变量中：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (x, y) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// x 的值现在是 1，y 的值现在是 2</span></span></code></pre></div><p>与 C 语言和 Objective-C 不同，Swift 的赋值语句不会返回任何值。因此，以下的 if 语句在 Swift 中是无效的：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark has-highlighted vp-code"><code><span class="line highlighted error"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> y { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 此语句错误，因为 \`x = y\` 不返回任何值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这种设计防止了将等于运算符（<code>==</code>）误写为赋值运算符（<code>=</code>）的常见错误。</p><h2 id="算术运算符" tabindex="-1">算术运算符 <a class="header-anchor" href="#算术运算符" aria-label="Permalink to &quot;算术运算符&quot;">​</a></h2><p>Swift 中所有数值类型都支持了基本的四则算术运算符：</p><p>加法（<code>+</code>）</p><p>减法（<code>-</code>）</p><p>乘法（<code>*</code>）</p><p>除法（<code>/</code>）</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 等于 3</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 等于 2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 等于 6</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2.5</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 等于 4.0</span></span></code></pre></div><p>与 C 语言和 Objective-C 不同的是，Swift 默认情况下不允许在数值运算中出现溢出情况。但是你可以使用 Swift 的<a href="./senior_operators.html#溢出运算符">溢出运算符</a>来实现溢出运算（如 a &amp;+ b）。</p><p>加法运算符也可用于 String 的拼接：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello, &quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 等于 &quot;hello, world&quot;</span></span></code></pre></div><h3 id="求余运算符" tabindex="-1">求余运算符 <a class="header-anchor" href="#求余运算符" aria-label="Permalink to &quot;求余运算符&quot;">​</a></h3><p>求余运算符（<code>a % b</code>），也称为模运算符，用于计算<code>a</code>除以<code>b</code>后的余数。具体来说，它找到<code>b</code>能在<code>a</code>中完全容纳多少次，然后返回剩余的部分。在许多编程语言中，这个运算符也被称为取模运算符。</p><details class="details custom-block"><summary>「求余」和「取模」</summary><p>在某些情况下，求余运算符的行为与严格的取模运算略有区别，因此将其称为“求余”可能更准确。这种差异体现在当参与运算的数是负数时，不同语言或环境下运算结果可能不同。</p><p>“求余”（remainder）和“取模”（modulus）这两个术语经常在讨论数学运算时被使用，特别是在编程中处理整数运算时，但它们在处理负数时的行为有所区别，这可能会导致一些混淆。</p><ol><li><p><strong>求余运算</strong>：</p><ul><li>求余运算（<code>a % b</code>）在大多数编程语言中定义为：它返回除法 <code>a / b</code> 后的余数。</li><li>无论 <code>a</code> 是正数还是负数，余数的符号通常与 <code>a</code> 相同。</li><li>例如，在 Python 和 JavaScript 中，<code>-10 % 3</code> 会返回 <code>-1</code>，因为 <code>-10</code> 除以 <code>3</code> 得到 <code>-3</code> 余 <code>-1</code>。</li></ul></li><li><p><strong>取模运算</strong>：</p><ul><li>取模运算与求余运算类似，但它要求余数的符号总是非负的，即使被除数是负数也是如此。</li><li>举个例子，在某些数学定义中，<code>-10 mod 3</code> 应返回 <code>2</code>，因为最接近 <code>-10</code> 的、由 <code>3</code> 的倍数组成的数是 <code>-12</code>（而不是 <code>-9</code>），所以 <code>-10 - (-12)</code> 等于 <code>2</code>。</li></ul></li></ol><p>这种差异主要是因为不同编程语言和数学规则对这两种运算的定义不完全相同。在编程实践中，这意味着当你在使用这些运算符时，需要注意你的编程环境是如何定义它们的，特别是在涉及负数时。如果你在一个特定的环境中工作（如 Swift、Python、Java），最好查看该环境的文档来确认使用的是哪种方式，从而确保你的计算结果符合预期。</p></details><p>这里有几个简单的例子：</p><h3 id="示例-1-基本求余" tabindex="-1">示例 1：基本求余 <a class="header-anchor" href="#示例-1-基本求余" aria-label="Permalink to &quot;示例 1：基本求余&quot;">​</a></h3><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 26</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: result is 1</span></span></code></pre></div><p>在这个例子中，26 除以 5 等于 5 余 1，所以结果是 1。</p><h3 id="示例-2-负数的求余" tabindex="-1">示例 2：负数的求余 <a class="header-anchor" href="#示例-2-负数的求余" aria-label="Permalink to &quot;示例 2：负数的求余&quot;">​</a></h3><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -26</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> negativeResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> d</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: negativeResult is -1</span></span></code></pre></div><p>这里，-26 除以 5 是 -5 余 -1。在 Swift 中，余数的符号与被除数相同。</p><h3 id="示例-3-被除数为负数" tabindex="-1">示例 3：被除数为负数 <a class="header-anchor" href="#示例-3-被除数为负数" aria-label="Permalink to &quot;示例 3：被除数为负数&quot;">​</a></h3><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 26</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -5</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mixedResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: mixedResult is 1</span></span></code></pre></div><p>在这种情况下，26 除以 -5 也是 -5 余 1。同样，余数的符号由被除数决定，因此结果为正 1。</p><h3 id="示例-4-除数和被除数均为负数" tabindex="-1">示例 4：除数和被除数均为负数 <a class="header-anchor" href="#示例-4-除数和被除数均为负数" aria-label="Permalink to &quot;示例 4：除数和被除数均为负数&quot;">​</a></h3><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -26</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -5</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> bothNegativeResult </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> g </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> h</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出: bothNegativeResult is -1</span></span></code></pre></div><p>这里，-26 除以 -5 是 5 余 -1，余数符号与被除数相同。</p><p>通过这些示例，我们可以看到求余运算符在处理不同符号的数时是如何工作的，以及余数的符号总是与被除数一致。</p><h3 id="一元负号运算符" tabindex="-1">一元负号运算符 <a class="header-anchor" href="#一元负号运算符" aria-label="Permalink to &quot;一元负号运算符&quot;">​</a></h3><p>数值的正负号可以使用前缀 -（即一元负号符）来切换：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> three </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minusThree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">three       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// minusThree 等于 -3</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plusThree </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">minusThree   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// plusThree 等于 3, 或 &quot;负负3&quot;</span></span></code></pre></div><p>一元负号符（-）写在操作数之前，中间没有空格。</p><h3 id="一元正号运算符" tabindex="-1">一元正号运算符 <a class="header-anchor" href="#一元正号运算符" aria-label="Permalink to &quot;一元正号运算符&quot;">​</a></h3><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> minusSix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -6</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> alsoMinusSix </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">minusSix  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// alsoMinusSix 等于 -6</span></span></code></pre></div><h2 id="组合赋值运算符" tabindex="-1">组合赋值运算符 <a class="header-anchor" href="#组合赋值运算符" aria-label="Permalink to &quot;组合赋值运算符&quot;">​</a></h2><p>像 C 语言一样，Swift 也支持将赋值运算符（<code>=</code>）与其他运算符结合使用的复合赋值运算符。一个常见的例子是组合加运算符（<code>+=</code>），这个运算符将右侧的值加到左侧的变量上，并将结果重新赋值给左侧的变量。这种方式简化了代码并使其更易读。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 现在 a 的值是 15</span></span></code></pre></div><p>在这个例子中，<code>a += 5</code> 相当于 <code>a = a + 5</code>。使用 <code>+=</code> 运算符，我们可以更简洁地表达“增加并赋值”的操作。</p><h2 id="比较运算符" tabindex="-1">比较运算符 <a class="header-anchor" href="#比较运算符" aria-label="Permalink to &quot;比较运算符&quot;">​</a></h2><p>Swift 支持以下的比较运算符：</p><ul><li>等于（a == b）</li><li>不等于（a != b）</li><li>大于（a &gt; b）</li><li>小于（a &lt; b）</li><li>大于等于（a &gt;= b）</li><li>小于等于（a &lt;= b）</li></ul><p>每个比较运算都返回了一个标识表达式是否成立的布尔值：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // true, 因为 1 等于 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // true, 因为 2 不等于 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true, 因为 2 大于 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // true, 因为 1 小于2</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &gt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // true, 因为 1 大于等于 1</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // false, 因为 2 并不小于等于 1</span></span></code></pre></div><p>比较运算多用于条件语句，如<code>if</code>条件：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hello, world&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;I&#39;m sorry </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(name)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">, but I don&#39;t recognize you&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出“hello, world&quot;, 因为 \`name\` 就是等于 &quot;world”</span></span></code></pre></div><details class="details custom-block"><summary>比较元组</summary><p>在 Swift 中，如果两个元组的元素类型和数量相同，这些元组就可以进行比较。比较两个元组时会从左到右逐个比较它们的元素。只有当前面的元素相等时，才会比较后面的元素。这意味着，整个元组的比较结果可能由任一元素决定，取决于从左到右的第一个不相等的元素。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;zebra&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果为 true，因为 1 小于 2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;apple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;bird&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)    </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果为 true，因为尽管第一个元素相等，第二个元素 &quot;apple&quot; 小于 &quot;bird&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dog&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果为 true，所有元素都相等</span></span></code></pre></div><p>你也可以使用这些运算符来比较包含可以比较的数据类型的元组，如 <code>Int</code> 和 <code>String</code>。然而，不所有类型都可以使用比较运算符，例如 <code>Bool</code> 类型，因为布尔值本身不支持大小比较。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;purple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 结果为 true，因为字符串 &quot;blue&quot; 小于 &quot;purple&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;blue&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;purple&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 错误，因为布尔类型不能使用小于运算符</span></span></code></pre></div><p>需要注意的是，Swift 标准库仅支持对元素数量不超过七个的元组进行比较。如果元组包含超过七个元素，你将需要自定义比较逻辑。</p></details><h2 id="三元运算符" tabindex="-1">三元运算符 <a class="header-anchor" href="#三元运算符" aria-label="Permalink to &quot;三元运算符&quot;">​</a></h2><p>三元运算符是一个涉及三个操作数的运算符。这个运算符提供了一种简洁的方式来根据条件选择两个表达式之一。如果条件为真，则运算符返回表达式1的结果；如果条件为假，则返回表达式2的结果。</p><p>三元运算符是一种简化版的条件语句，其形式为 question ? answer1 : answer2。这实际上是以下 if-else 语句的缩写：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> question {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    answer1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    answer2</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>假设我们正在编写一个程序来显示用户的状态消息。用户可以设置状态为「在线」或「离线」，并且我们希望在界面上相应地显示不同的消息颜色。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOnline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> statusColor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isOnline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Green&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Red&quot;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// statusColor 将是 &quot;Green&quot;</span></span></code></pre></div><p>在这个例子中，<code>isOnline</code> 是一个布尔变量，用于表示用户是否在线。使用三元运算符，我们可以在一行内决定 <code>statusColor</code> 应该是绿色（表示在线）还是红色（表示离线）。</p><p>这种方式非常适合在需要根据条件快速选择两个选项之一的场景，极大地简化了代码，避免了更冗长的 <code>if-else</code> 语句结构。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>滥用三元运算符会降低代码可读性，所以我们应避免在一个复合语句中使用多个三元运算符。</p></div><h2 id="空合运算符" tabindex="-1">空合运算符 <a class="header-anchor" href="#空合运算符" aria-label="Permalink to &quot;空合运算符&quot;">​</a></h2><p>空合运算符（<code>a ?? b</code>）是一种用于处理「可选类型」的运算符，它提供了一种简洁的方法来处理可选值。</p><p>如果可选类型 <code>a</code> 包含一个值，该运算符会解包 <code>a</code> 并返回这个值；如果 <code>a</code> 为空（即 <code>nil</code>），则返回默认值 <code>b</code>。</p><p>此外，表达式 <code>a</code> 必须是一个<strong>可选类型</strong>，而默认值 <code>b</code> 的「类型」必须与 <code>a</code> 中潜在值的类型相「匹配」。</p><p>空合运算符是以下三元运算符表达式的简洁替代方式：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span></span></code></pre></div><p>在这段代码中，如果可选类型 <code>a</code> 有值，则使用 <code>!</code> 进行强制解包以访问该值；如果 <code>a</code> 为空，则返回默认值 <code>b</code>。</p><p>假设我们正在开发一个应用，其中用户的昵称是可选的。如果用户没有提供昵称，我们希望在界面上显示一个默认的昵称。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 可选类型的昵称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nickname: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 使用空合运算符提供默认昵称</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> displayName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nickname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guest&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出结果</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(displayName)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !!!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在这个示例中，<code>nickname</code>是一个可选的 String 类型，最初被设置为 nil，表示没有值。</p><p>我们使用空合运算符<code>??</code>来决定显示的名称。由于<code>nickname</code>是 nil，所以空合运算符会返回默认值 &quot;Guest&quot;。因此，输出将是 &quot;Welcome, Guest !!!&quot;。</p><p>如果我们更改<code>nickname</code>的值并再次运行相同的代码，例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">nickname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Alice&quot;</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> displayName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nickname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">??</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;Guest&quot;</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(displayName)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !!!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>由于<code>nickname</code>现在包含值 &quot;Alice&quot;，空合运算符会解包<code>nickname</code>并返回 &quot;Alice&quot;，使得输出变为 &quot;Welcome, Alice !!!&quot;。</p><h2 id="区间运算符" tabindex="-1">区间运算符 <a class="header-anchor" href="#区间运算符" aria-label="Permalink to &quot;区间运算符&quot;">​</a></h2><h3 id="闭区间运算符" tabindex="-1">闭区间运算符 <a class="header-anchor" href="#闭区间运算符" aria-label="Permalink to &quot;闭区间运算符&quot;">​</a></h3><p>闭区间运算符（<code>a...b</code>）定义一个包含从<code>a</code>到<code>b</code>（包括<code>a</code>和<code>b</code>）的所有值的区间。<code>a</code>的值不能超过<code>b</code>。</p><p>闭区间运算符在迭代一个区间的所有值时是非常有用的，如在<code>for-in</code>循环中：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark has-focused-lines vp-code"><code><span class="line highlighted has-focus"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(index)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> * 5 = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(index </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 1 * 5 = 5</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 2 * 5 = 10</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 3 * 5 = 15</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 4 * 5 = 20</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 5 * 5 = 25</span></span></code></pre></div><h3 id="半开区间运算符" tabindex="-1">半开区间运算符 <a class="header-anchor" href="#半开区间运算符" aria-label="Permalink to &quot;半开区间运算符&quot;">​</a></h3><p>半开区间运算符（<code>a..&lt;b</code>）定义一个从<code>a</code>到<code>b</code>但不包括<code>b</code>的区间。 之所以称为半开区间，是因为该区间包含第一个值而不包括最后的值。</p><p>半开区间的实用性在于当你使用一个从<code>0</code>开始的列表（如数组）时，非常方便地从<code>0</code>数到列表的长度。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> names </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Anna&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Alex&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Brian&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Jack&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> count </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> names.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">count</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count { </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;第 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 个人叫 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(names[i])</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第 1 个人叫 Anna</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第 2 个人叫 Alex</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第 3 个人叫 Brian</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 第 4 个人叫 Jack</span></span></code></pre></div><h3 id="单侧区间" tabindex="-1">单侧区间 <a class="header-anchor" href="#单侧区间" aria-label="Permalink to &quot;单侧区间&quot;">​</a></h3><p>闭区间操作符还有一个变种形式，允许表达单侧无限延伸的区间。这种区间称为单侧区间，其中一侧的界限是明确的，而另一侧则是开放的，可以延伸到可能的最远范围。例如，要表示一个数组从索引<code>2</code>开始直到数组末尾的所有元素的区间，你可以省略区间操作符的一侧值：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> names[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] { </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Brian</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Jack</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> names[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Anna</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alex</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Brian</span></span></code></pre></div><p>半开区间操作符也可以用于创建单侧区间，这时区间只有一个明确的起始点或结束点，而另一端则是开放的。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> names[</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">..&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Anna</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Alex</span></span></code></pre></div><p>单侧区间在 Swift 中非常灵活，不仅可以用于数组的下标，还可以在其他场景中使用。例如，你无法遍历省略了起始值的单侧区间（如<code>...5</code>），因为它没有明确的开始点。然而，你可以遍历一个省略了结束值的单侧区间（如<code>5...</code>），但由于这种区间理论上可以无限延伸，所以在使用时需要确保循环中有一个能够结束遍历的条件。</p><p>此外，单侧区间也可以用来检查是否包含某个特定值。例如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> range </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">range.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 false，因为 7 不在区间 ...5 内</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">range.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)   </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 true，因为 4 包含在区间 ...5 内</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">range.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contains</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">-1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 返回 true，因为 -1 也包含在区间 ...5 内</span></span></code></pre></div><p>在这个例子中，区间<code>...5</code>表示从负无穷大到<code>5</code>的所有数。该区间包括任何小于或等于<code>5</code>的数，因此，<code>range.contains(4)</code>和<code>range.contains(-1)</code>返回<code>true</code>，而<code>range.contains(7)</code>返回 <code>false</code>。这种类型的区间非常适用于范围检查或在条件语句中快速判断一个值是否属于某个范围。</p><h2 id="逻辑运算符" tabindex="-1">逻辑运算符 <a class="header-anchor" href="#逻辑运算符" aria-label="Permalink to &quot;逻辑运算符&quot;">​</a></h2><p>逻辑运算符的操作对象是逻辑布尔值。Swift 支持基于 C 语言的三个标准逻辑运算。</p><p>逻辑非（<code>!a</code>）</p><p>逻辑与（<code>a &amp;&amp; b</code>）</p><p>逻辑或（<code>a || b</code>）</p><h3 id="逻辑非" tabindex="-1">逻辑非 <a class="header-anchor" href="#逻辑非" aria-label="Permalink to &quot;逻辑非&quot;">​</a></h3><p>逻辑非运算符（<code>!a</code>）对一个布尔值取反，使得<code>true</code>变<code>false</code>，<code>false</code>变<code>true</code>。</p><p>它是一个前置运算符，需紧跟在操作数之前，且不加空格。读作 <code>非a</code>，例子如下：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> allowedEntry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">allowedEntry {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ACCESS DENIED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出“ACCESS DENIED”</span></span></code></pre></div><h3 id="逻辑与" tabindex="-1">逻辑与 <a class="header-anchor" href="#逻辑与" aria-label="Permalink to &quot;逻辑与&quot;">​</a></h3><p>逻辑与运算符（<code>a &amp;&amp; b</code>）表达了只有<code>a</code>和<code>b</code>的值都为<code>true</code>时，整个表达式的值才会是<code>true</code>。</p><p>只要任意一个值为<code>false</code>，整个表达式的值就为<code>false</code>。事实上，如果第一个值为 <code>false</code>，那么是不去计算第二个值的，因为它已经不可能影响整个表达式的结果了。这被称做「短路」。</p><p>以下例子，只有两个 Bool 值都为<code>true</code>的时候才允许进入<code>if</code>：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enteredDoorCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passedRetinaScan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enteredDoorCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passedRetinaScan {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ACCESS DENIED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出“ACCESS DENIED”</span></span></code></pre></div><h3 id="逻辑或" tabindex="-1">逻辑或 <a class="header-anchor" href="#逻辑或" aria-label="Permalink to &quot;逻辑或&quot;">​</a></h3><p>逻辑或运算符（<code>a || b</code>）是一个中置运算符，由两个连续的竖线（<code>||</code>）组成。它用来连接两个逻辑表达式，如果其中至少一个表达式为 <code>true</code>，那么整个表达式的结果就为<code>true</code>。</p><p>逻辑或运算符具有“短路”特性，这意味着在进行计算时，如果左边的表达式已经为 <code>true</code>，则不再计算右边的表达式。这是因为一旦左边的表达式为<code>true</code>，不管右边的表达式结果如何，整个表达式的结果都已确定为<code>true</code>。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> accessGranted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isAdmin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> true</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasValidPassword </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">accessGranted </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isAdmin </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasValidPassword</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Access granted: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(accessGranted)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在这个例子中，我们有两个布尔变量 <code>isAdmin</code> 和 <code>hasValidPassword</code>。变量 <code>isAdmin</code> 代表用户是否是管理员，而 <code>hasValidPassword</code> 则表示用户是否拥有有效的密码。</p><p>这里的逻辑或运算 <code>isAdmin || hasValidPassword</code> 用于决定是否授予访问权限。由于 <code>isAdmin</code> 已经是 <code>true</code>，根据逻辑或运算符的短路特性，<code>hasValidPassword</code> 的值（即使是 <code>false</code>）不会影响结果，因为 <code>isAdmin</code> 的 <code>true</code> 已经决定了整个表达式的结果。因此，<code>accessGranted</code> 被设置为 <code>true</code>，并且打印出 &quot;Access granted: true&quot;。</p><h3 id="逻辑运算符组合计算" tabindex="-1">逻辑运算符组合计算 <a class="header-anchor" href="#逻辑运算符组合计算" aria-label="Permalink to &quot;逻辑运算符组合计算&quot;">​</a></h3><p>我们可以组合多个逻辑运算符来表达一个复合逻辑：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> enteredDoorCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passedRetinaScan </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasDoorKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> knowsOverridePassword {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ACCESS DENIED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出“Welcome!”</span></span></code></pre></div><p>这里，表达式的逻辑条件如下：</p><ol><li><p><strong><code>enteredDoorCode &amp;&amp; passedRetinaScan</code></strong>: 这部分是一个逻辑与运算。要求两个条件同时满足：用户必须输入正确的门禁码 (<code>enteredDoorCode</code>) 并且通过视网膜扫描验证 (<code>passedRetinaScan</code>)。只有两个条件都为真，这个部分的结果才为真。</p></li><li><p><strong><code>hasDoorKey</code></strong>: 这是一个简单的条件，检查用户是否持有门钥匙。</p></li><li><p><strong><code>knowsOverridePassword</code></strong>: 这也是一个简单的条件，检查用户是否知道可以覆盖常规安全措施的密码。</p></li></ol><p>整个条件部分使用了逻辑或运算符 (<code>||</code>) 连接上述三个条件。这意味着如果上述条件中的任何一个为真，整个条件表达式的结果就为真。因此，如果用户符合以下任一条件：</p><ul><li>同时满足输入正确的门禁码并通过视网膜扫描</li><li>持有门钥匙</li><li>知道可以覆盖安全系统的密码</li></ul><p>则执行 <code>print(&quot;Welcome!&quot;)</code> 表示欢迎进入。否则，如果这三个条件都不满足，执行 <code>else</code> 分支，打印 &quot;ACCESS DENIED&quot;，表示访问被拒绝。</p><p>这段代码展示了如何使用逻辑运算符来处理复杂的条件判断，确保只有在满足特定安全条件之一时才允许访问。</p><div class="tip custom-block"><p class="custom-block-title">左结合</p><p>逻辑操作符 <code>&amp;&amp;</code> (逻辑与) 和 <code>||</code> (逻辑或) 是左结合的，这意味着当表达式中包含多个这样的操作符时，解析器会从左向右处理它们，优先计算最左边的子表达式。</p></div><h3 id="使用括号来明确优先级" tabindex="-1">使用括号来明确优先级 <a class="header-anchor" href="#使用括号来明确优先级" aria-label="Permalink to &quot;使用括号来明确优先级&quot;">​</a></h3><p>为了一个复杂表达式更容易读懂，在合适的地方使用括号来明确优先级是很有效的，虽然它并非必要的。在上个关于门的权限的例子中，我们给第一个部分加个括号，使它看起来逻辑更明确：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (enteredDoorCode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> passedRetinaScan) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasDoorKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> knowsOverridePassword {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Welcome!&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;ACCESS DENIED&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出“Welcome!”</span></span></code></pre></div>`,139),l=[t];function e(p,k,d,r,o,c){return a(),i("div",null,l)}const y=s(h,[["render",e]]);export{g as __pageData,y as default};
