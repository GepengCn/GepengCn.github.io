import{_ as s,c as i,o as a,a4 as e}from"./chunks/framework.C7sZLB-2.js";const t="/gepengcn.github.io/assets/TimelineView.De_259mC.mp4",y=JSON.parse('{"title":"Updating a view on a schedule","description":"","frontmatter":{},"headers":[],"relativePath":"swiftui/animations/updating_a_view_on_a_schedule.md","filePath":"swiftui/animations/updating_a_view_on_a_schedule.md","lastUpdated":1715408042000}'),n={name:"swiftui/animations/updating_a_view_on_a_schedule.md"},l=e(`<h1 id="updating-a-view-on-a-schedule" tabindex="-1">Updating a view on a schedule <a class="header-anchor" href="#updating-a-view-on-a-schedule" aria-label="Permalink to &quot;Updating a view on a schedule&quot;">​</a></h1><h2 id="timelineview" tabindex="-1"><code>TimelineView</code> <a class="header-anchor" href="#timelineview" aria-label="Permalink to &quot;\`TimelineView\`&quot;">​</a></h2><p>一个根据你提供的时间表更新的视图。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Schedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Schedule </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimelineSchedule</span></span></code></pre></div><p>时间轴视图本身没有任何外观，而是在预定的时间点重新绘制其包含的内容。例如，你可以每秒更新一次模拟计时器的表面：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> AnalogTimerView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">periodic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.date.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><video src="`+t+`" controls="controls"></video></p><p>创建内容的闭包接收一个 <code>TimelineView.Context</code> 类型的输入，你可以使用它来自定义内容的外观。上下文包括触发更新的日期。在上面的示例中，时间轴视图将该日期发送到你创建的模拟计时器，以便计时器视图知道如何在其表面上绘制指针。</p><p>上下文还包括一个 <code>cadence</code> 属性，你可以使用它来隐藏不必要的细节。例如，你可以使用 <code>cadence</code> 来决定何时适合显示计时器的秒针：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">periodic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: startDate, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    AnalogTimerView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: context.date,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        showSeconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: context.cadence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .seconds)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>系统可能使用比时间表更新速率慢的节奏。例如，watchOS 上的视图可能在用户放下手腕时仍然可见，但更新频率较低，因此需要的细节较少。</p><p>你可以通过创建符合 <code>TimelineSchedule</code> 协议的类型来定义自定义时间表，或者使用内置的时间表类型之一：</p><ul><li>使用 <code>everyMinute</code> 时间表在每分钟开始时更新。</li><li>使用 <code>periodic(from:by:)</code> 时间表定期更新，具有自定义的开始时间和更新之间的间隔。</li><li>当你需要有限数量或不规则的更新时，使用 <code>explicit(_:)</code> 时间表。</li></ul><p>对于只包含过去日期的时间表，时间轴视图显示时间表中的最后一个日期。对于只包含未来日期的时间表，时间轴视图使用当前日期绘制其内容，直到第一个预定日期到来。</p><h3 id="init-content" tabindex="-1"><code>init(_:content:)</code> <a class="header-anchor" href="#init-content" aria-label="Permalink to &quot;\`init(_:content:)\`&quot;">​</a></h3><p>创建一个使用给定时间表的新时间轴视图。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> schedule: Schedule,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    @</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ViewBuilder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> content: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@escaping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (TimelineViewDefaultContext) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Content</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>当 <code>Schedule</code> 符合 <code>TimelineSchedule</code> 协议且 <code>Content</code> 符合 <code>View</code> 协议时可用。</p><ul><li><code>schedule</code>：生成一个日期序列的时间表，该序列指示视图应该更新的实例。使用符合 <code>TimelineSchedule</code> 协议的类型，例如 <code>everyMinute</code>，或者你定义的自定义时间表。</li><li><code>content</code>：在时间表指示的时刻生成视图内容的闭包。闭包接受一个 <code>TimelineViewDefaultContext</code> 类型的输入，其中包括促使更新的时间表中的日期，以及视图可以用于自定义其外观的 <code>TimelineView.Context.Cadence</code> 值。</li></ul><h3 id="timelineview-context" tabindex="-1"><code>TimelineView.Context</code> <a class="header-anchor" href="#timelineview-context" aria-label="Permalink to &quot;\`TimelineView.Context\`&quot;">​</a></h3><p>传递给时间轴视图内容回调的信息。</p><p>上下文包括触发回调的时间表中的日期，以及你可以用于自定义视图外观的节奏。例如，你可能会选择仅在节奏为 <code>TimelineView.Context.Cadence.seconds</code> 或更快时显示模拟时钟的秒针。</p><div class="info custom-block"><p class="custom-block-title"><code>date</code></p><p><code>TimelineView</code> 闭包第一次接收到这个日期时，它可能在过去。例如，如果你在 10:09:55 创建一个 <code>everyMinute</code> 时间表，时间表会创建 10:09:00、10:10:00、10:11:00 等条目。作为响应，时间轴视图会立即在 10:09:55 进行初始更新，但上下文包含 10:09:00 日期条目。后续条目会在其对应的时间到达。</p></div><div class="info custom-block"><p class="custom-block-title"><code>cadence</code></p><p>时间轴更新视图的速率。</p><p>使用此值来隐藏比视图当前更新速率更快的更新信息。例如，当节奏比 <code>TimelineView.Context.Cadence.live</code> 慢时，可以隐藏数字计时器的毫秒组件。</p><p>由于 <code>TimelineView.Context.Cadence</code> 枚举符合 <code>Comparable</code> 协议，因此可以使用关系运算符比较节奏。较慢的节奏具有较高的值，因此可以使用以下比较来执行上述检查：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hideMilliseconds </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cadence </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .live</span></span></code></pre></div><ul><li><code>case live</code>: 持续更新视图。</li><li><code>case seconds</code>: 大约每秒更新一次视图。</li><li><code>case minutes</code>: 大约每分钟更新一次视图。</li></ul></div><div class="info custom-block"><p class="custom-block-title"><code>invalidateTimelineContent()</code></p><p>重置系统从时间轴中预渲染的任何视图。</p><p>当进入常亮显示时，系统可能会预渲染帧。如果这些帧的内容必须以时间表或时间轴视图当前绑定无法反映的方式更改（例如，因为用户更改了未来日历事件的标题），请调用此方法请求重新生成帧。</p></div><h2 id="timelineschedule" tabindex="-1"><code>TimelineSchedule</code> <a class="header-anchor" href="#timelineschedule" aria-label="Permalink to &quot;\`TimelineSchedule\`&quot;">​</a></h2><p>一种提供日期序列作为时间表使用的类型。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">protocol</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TimelineSchedule</span></span></code></pre></div><p>符合此协议的类型通过定义返回日期序列的 <code>entries(from:mode:)</code> 方法来实现特定类型的时间表。当初始化 <code>TimelineView</code> 时使用时间轴时间表类型。例如，你可以使用 <code>periodic(from:by:)</code> 返回的定期时间表创建一个从某个 <code>startDate</code> 开始每秒更新一次的时间轴视图：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">periodic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: startDate, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // View content goes here.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你还可以创建自定义时间轴时间表。时间轴视图根据时间表产生的日期序列更新其内容。</p><h3 id="getting-built-in-schedules" tabindex="-1">Getting built-in schedules <a class="header-anchor" href="#getting-built-in-schedules" aria-label="Permalink to &quot;Getting built-in schedules&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title"><code>animation</code></p><p>一个可暂停的日期时间表，更新频率不超过提供的间隔。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> animation: AnimationTimelineSchedule { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title"><code>animation(minimumInterval:paused:)</code></p><p>一个可暂停的日期时间表，更新频率不超过提供的间隔。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> animation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    minimumInterval</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    paused</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AnimationTimelineSchedule</span></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title"><code>everyMinute</code></p><p>每分钟开始时更新时间轴视图的时间表。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> everyMinute: EveryMinuteTimelineSchedule { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>当你希望在每分钟开始时安排时间轴视图更新时，使用每分钟时间轴时间表初始化时间轴视图：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.everyMinute) { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.date.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>该时间表将第一个日期作为用于初始化时间轴视图的分钟的开始。例如，如果你在 10:09:38 创建时间轴视图，时间表的第一个条目是 10:09:00。作为响应，时间轴视图立即执行其第一次更新，将当前分钟的开始（即 10:09:00）作为上下文提供给其内容。后续更新发生在接下来的每一分钟的开始。</p><p>时间表定义了 <code>EveryMinuteTimelineSchedule.Entries</code> 结构，以在时间轴视图调用 <code>entries(from:mode:)</code> 方法时返回日期序列。</p></div><div class="tip custom-block"><p class="custom-block-title"><code>explicit(_:)</code></p><p>一个用于在明确的时间点更新时间轴视图的时间表。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> explicit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">S</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dates: S) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExplicitTimelineSchedule&lt;S&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Self</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ExplicitTimelineSchedule&lt;S&gt;, S </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Sequence</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, S.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Element</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date</span></span></code></pre></div><ul><li><code>dates</code>：时间轴视图更新的日期序列。使用单调递增的日期序列，并确保至少有一个在未来。</li></ul><p>当你希望在特定时间点安排视图更新时，使用明确的时间轴时间表初始化时间轴视图：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dates </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">timeIntervalSinceNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Update ten seconds from now,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">timeIntervalSinceNow</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">12</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// and a few seconds later.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> MyView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">explicit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(dates)) { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.date.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>时间轴视图在你指定的确切日期上更新其内容，直到日期用完，之后它停止更改。如果你提供的日期在过去，时间轴视图仅更新一次，使用最后一个条目。如果你只提供未来的日期，时间轴视图将使用当前日期进行渲染，直到第一个日期到来。如果你提供一个或多个过去的日期和一个或多个未来的日期，视图将渲染最近的过去日期，并在所有后续日期上正常刷新。</p></div><div class="tip custom-block"><p class="custom-block-title"><code>periodic(from:by:)</code></p><p>一个用于以固定间隔更新时间轴视图的时间表。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">static</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> periodic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startDate: Date,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interval: TimeInterval</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PeriodicTimelineSchedule</span></span></code></pre></div><ul><li><code>startDate</code>：序列开始的日期。</li><li><code>interval</code>：连续序列条目的时间间隔。</li></ul><p>当你希望使用自定义间隔定期安排时间轴视图更新时，使用定期时间轴时间表初始化时间轴视图：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">TimelineView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">periodic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: startDate, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(context.date.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>时间轴视图在开始日期更新其内容，然后在时间上以间隔量分隔的日期再次更新，在上述示例中，间隔量为每三秒。对于过去的开始日期，视图立即更新，并将对应于最近间隔边界的日期作为上下文提供。然后，视图在后续间隔边界上正常刷新。对于未来的开始日期，视图更新一次，使用当前日期，然后在开始日期开始定期更新。</p><p>时间表定义了 <code>PeriodicTimelineSchedule.Entries</code> 结构，以在时间轴视图调用 <code>entries(from:mode:)</code> 方法时返回日期序列。</p></div><div class="tip custom-block"><p class="custom-block-title"><code>entries(from:mode:)</code></p><p>提供从给定日期开始的日期序列。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> startDate: Date,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Mode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.Entries</span></span></code></pre></div><ul><li><code>startDate</code>：序列开始的日期。</li><li><code>mode</code>：表示时间表是正常更新，还是以其他某种节奏更新。</li></ul><p>你创建的 <code>TimelineView</code> 会调用此方法来确定何时更新其内容。该方法按升序返回一个日期序列，代表时间轴视图应该更新的时间点。符合 <code>TimelineSchedule</code> 协议的类型，例如由 <code>periodic(from:by:)</code> 返回的类型，或者你定义的自定义时间表，会实现此方法的自定义版本来实现特定类型的时间表。</p><p>序列中的一个或多个日期可能在给定的 <code>startDate</code> 之前，在这种情况下，时间轴视图在 <code>startDate</code> 使用最接近该日期的条目进行第一次更新。例如，如果对于 <code>startDate</code> 为 10:09:55，该方法返回一个值为 10:09:00、10:10:00、10:11:00 等的序列，时间轴视图将在 10:09:55 进行初始更新（使用 10:09:00 条目），然后从 10:10:00 开始每分钟进行一次更新。</p><p>符合协议的类型应根据模式在可能的情况下调整其行为。例如，提供计时器更新的定期时间表可以在 <code>TimelineScheduleMode.lowFrequency</code> 模式下将更新限制为每分钟一次：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">unc </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    from startDate</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Date, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">mode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: TimelineScheduleMode</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> PeriodicTimelineSchedule</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">periodic</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: startDate, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (mode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .lowFrequency </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 60.0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div>`,38),h=[l];function p(k,d,c,E,o,r){return a(),i("div",null,h)}const F=s(n,[["render",p]]);export{y as __pageData,F as default};
