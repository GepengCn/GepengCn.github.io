import{_ as n,c as e,l as s,a as i,a4 as a,o as t}from"./chunks/framework.C7sZLB-2.js";const l="/gepengcn.github.io/assets/Image-1@2x.Y8h4dMci.png",h="/gepengcn.github.io/assets/Image-3@2x.Oxl2mJOR.png",p="/gepengcn.github.io/assets/Image-2@2x.CoyKCbM_.png",k="/gepengcn.github.io/assets/SymbolRenderingModeHierarchical.Bm8YEGuS.png",d="/gepengcn.github.io/assets/SymbolRenderingModeMonochrome.DOXpF54E.png",o="/gepengcn.github.io/assets/SymbolRenderingModeMulticolor.DU8R_duQ.png",r="/gepengcn.github.io/assets/SymbolRenderingModePalette.CkgRhHX2.png",g="/gepengcn.github.io/assets/SwiftUI-Image-TemplateRenderingMode-dots@2x.CM3eCmOc.png",c="/gepengcn.github.io/assets/SwiftUI-Image-TemplateRenderingMode-sfsymbols@2x.CYV_H34o.png",us=JSON.parse('{"title":"Creating an image","description":"","frontmatter":{},"headers":[],"relativePath":"swiftui/images/creating_an_image.md","filePath":"swiftui/images/creating_an_image.md","lastUpdated":1715817355000}'),E={name:"swiftui/images/creating_an_image.md"},y=a(`<h1 id="creating-an-image" tabindex="-1">Creating an image <a class="header-anchor" href="#creating-an-image" aria-label="Permalink to &quot;Creating an image&quot;">​</a></h1><h2 id="image" tabindex="-1"><code>Image</code> <a class="header-anchor" href="#image" aria-label="Permalink to &quot;\`Image\`&quot;">​</a></h2><p>一个显示图像的视图。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@frozen</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Image</span></span></code></pre></div><p>当你想向你的 SwiftUI 应用程序添加图像时，可以使用 <code>Image</code> 实例。你可以从许多来源创建图像：</p><ul><li>应用程序资产库或包中的图像文件。支持的类型包括 PNG、JPEG、HEIC 等。</li><li>特定于平台的图像类型的实例，如 <code>UIImage</code> 和 <code>NSImage</code>。</li><li>存储在 <code>Core Graphics CGImage</code> 实例中的位图。</li><li>来自 <code>SF Symbols</code> 集的系统图形。</li></ul><p>下面的示例展示了如何从应用程序的资产库或包中加载图像并将其缩放以适应其容器：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Landscape_4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">resizable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">aspectRatio</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contentMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .fit)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Water wheel&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p><img src="`+l+`" alt="Image-1@2x"></p><p>你可以使用 <code>Image</code> 类型的方法以及标准视图修饰符来调整图像的大小以适应你的应用程序界面。在这里，<code>Image</code> 类型的 <code>resizable(capInsets:resizingMode:)</code> 方法将图像缩放以适应当前视图。然后，<code>aspectRatio(_:contentMode:)</code> 视图修饰符调整此缩放行为，以保持图像的原始纵横比，而不是独立缩放 x 轴和 y 轴以填充视图的所有四个边。文章“将图像适配到可用空间”展示了如何对不同大小的 <code>Image</code> 实例应用缩放、裁剪和平铺。</p><p><code>Image</code> 是一个后期绑定令牌；系统仅在即将在环境中使用图像时才解析其实际值。</p><h3 id="making-images-accessible" tabindex="-1">Making images accessible <a class="header-anchor" href="#making-images-accessible" aria-label="Permalink to &quot;Making images accessible&quot;">​</a></h3><p>要将图像用作控件，请使用带有标签参数的初始化器之一。这允许系统的辅助功能框架将标签用作使用 <code>VoiceOver</code> 等功能的用户的控件名称。对于仅出于美学原因存在的图像，请使用带有装饰性参数的初始化器；辅助功能系统会忽略这些图像。</p><h2 id="init-bundle" tabindex="-1"><code>init(_:bundle:)</code> <a class="header-anchor" href="#init-bundle" aria-label="Permalink to &quot;\`init(_:bundle:)\`&quot;">​</a></h2><p>创建一个带标签的图像，你可以将其用作控件的内容。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>name</code>: 要查找的图像资源的名称，以及用于标记图像的本地化键。</li><li><code>bundle</code>: 要搜索图像资源和本地化内容的包。如果为 <code>nil</code>，则 SwiftUI 使用主包。默认值为 <code>nil</code>。</li></ul><h2 id="init-variablevalue-bundle" tabindex="-1"><code>init(_:variableValue:bundle:)</code> <a class="header-anchor" href="#init-variablevalue-bundle" aria-label="Permalink to &quot;\`init(_:variableValue:bundle:)\`&quot;">​</a></h2><p>创建一个带标签的图像，你可以将其用作控件的内容，并带有一个变量值。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    variableValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    bundle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Bundle</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,20),m=s("li",null,[s("code",null,"name"),i(": 要查找的图像资源的名称，以及用于标记图像的本地化键。")],-1),u=s("code",null,"variableValue",-1),C={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},F={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.891ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1278 688","aria-hidden":"true"},_=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)" style="stroke-width:3;"></path></g></g></g>',1),b=[_],T=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"0.0")])],-1),Q={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},w={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.891ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1278 688","aria-hidden":"true"},v=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)" style="stroke-width:3;"></path></g></g></g>',1),x=[v],f=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"1.0")])],-1),B=s("li",null,[s("code",null,"bundle"),i(": 要搜索图像资源和本地化内容的包。如果为 "),s("code",null,"nil"),i("，则 SwiftUI 使用主包。默认值为 "),s("code",null,"nil"),i("。")],-1),I=a(`<h2 id="init-scale-orientation-label" tabindex="-1"><code>init(_:scale:orientation:label:)</code> <a class="header-anchor" href="#init-scale-orientation-label" aria-label="Permalink to &quot;\`init(_:scale:orientation:label:)\`&quot;">​</a></h2><p>创建一个基于 <code>Core Graphics</code> 图像实例的带标签图像，可用作控件的内容。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    _</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cgImage: CGImage,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    scale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: CGFloat,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    orientation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Image.Orientation </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">up</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Text</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,3),M=s("li",null,[s("code",null,"cgImage"),i(": 基础图形图像。")],-1),S=s("code",null,"scale",-1),A={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.891ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1278 688","aria-hidden":"true"},D=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)" style="stroke-width:3;"></path></g></g></g>',1),V=[D],R=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"1.0")])],-1),P={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},z={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.891ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1278 688","aria-hidden":"true"},N=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z" style="stroke-width:3;"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)" style="stroke-width:3;"></path></g></g></g>',1),H=[N],Z=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"2.0")])],-1),G={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},U={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.891ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1278 688","aria-hidden":"true"},L=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z" style="stroke-width:3;"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)" style="stroke-width:3;"></path></g></g></g>',1),j=[L],J=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"3.0")])],-1),O=s("li",null,[s("code",null,"orientation"),i(": 图像的方向。默认值为 "),s("code",null,"Image.Orientation.up"),i("。")],-1),$=s("li",null,[s("code",null,"label"),i(": 与图像相关联的标签。SwiftUI 将标签用于辅助功能。")],-1),Y=a('<h2 id="init-systemname" tabindex="-1"><code>init(systemName:)</code> <a class="header-anchor" href="#init-systemname" aria-label="Permalink to &quot;`init(systemName:)`&quot;">​</a></h2><p>创建一个系统符号图像。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>systemName</code>: 系统符号图像的名称。使用 SF Symbols 应用程序查找系统符号图像的名称。</li></ul><p>此初始化器使用系统提供的符号创建图像。使用 SF Symbols 查找符号及其相应的名称。</p><p>要从应用程序的资产目录中创建自定义符号图像，请使用 <code>init(_:bundle:)</code> 代替。</p><h2 id="init-systemname-variablevalue" tabindex="-1"><code>init(systemName:variableValue:)</code> <a class="header-anchor" href="#init-systemname-variablevalue" aria-label="Permalink to &quot;`init(systemName:variableValue:)`&quot;">​</a></h2><p>创建一个具有变量值的系统符号图像。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    variableValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Double</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>',9),X=s("li",null,[s("p",null,[s("code",null,"systemName"),i(": 系统符号图像的名称。使用 SF Symbols 应用程序查找系统符号图像的名称。")])],-1),K=s("code",null,"variableValue",-1),W={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ss={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.891ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1278 688","aria-hidden":"true"},is=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" style="stroke-width:3;"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)" style="stroke-width:3;"></path></g></g></g>',1),as=[is],es=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"0.0")])],-1),ts={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},ns={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.891ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1278 688","aria-hidden":"true"},ls=a('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z" transform="translate(500,0)" style="stroke-width:3;"></path><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z" transform="translate(778,0)" style="stroke-width:3;"></path></g></g></g>',1),hs=[ls],ps=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mn",null,"1.0")])],-1),ks=a(`<p>此初始化器使用系统提供的符号创建图像。渲染的符号可能会改变其外观以表示 <code>variableValue</code> 中提供的值。使用 SF Symbols（版本 4.0 或更高版本）查找支持变量值的系统符号及其相应的名称。</p><p>下面的示例显示了使用不同值创建 &quot;chart.bar.fill&quot; 符号的效果。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chart.bar.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">variableValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chart.bar.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">variableValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;chart.bar.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">variableValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">system</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.largeTitle))</span></span></code></pre></div><p><img src="`+h+`" alt="Image-3@2x"></p><h2 id="init-size-label-opaque-colormode-renderer" tabindex="-1"><code>init(size:label:opaque:colorMode:renderer:)</code> <a class="header-anchor" href="#init-size-label-opaque-colormode-renderer" aria-label="Permalink to &quot;\`init(size:label:opaque:colorMode:renderer:)\`&quot;">​</a></h2><p>初始化给定大小的图像，其内容由自定义渲染闭包提供。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: CGSize,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    opaque</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    colorMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ColorRenderingMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .nonLinear,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    renderer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@escaping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">inout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GraphicsContext) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Void</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><ul><li><code>size</code>: 新创建图像的大小。</li><li><code>label</code>: 与图像相关联的标签。SwiftUI 将标签用于辅助功能。</li><li><code>opaque</code>: 一个布尔值，指示图像是否完全不透明。如果为 true，则可能会提高性能。不要将非不透明像素渲染到声明为不透明的图像上。默认值为 false。</li><li><code>colorMode</code>: 图像的工作颜色空间和存储格式。默认值为 <code>ColorRenderingMode.nonLinear</code>。</li><li><code>renderer</code>: 一个用于绘制图像内容的闭包。闭包接收一个 <code>GraphicsContext</code> 作为其参数。</li></ul><p>使用此初始化器通过在提供给渲染器闭包的 <code>GraphicsContext</code> 上调用绘图命令来创建图像。</p><p>下面的示例显示了一个自定义图像，通过传递 <code>GraphicContext</code> 绘制一个椭圆并用渐变填充它来创建：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mySize </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> CGSize</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">width</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">300</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">height</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: mySize) { context </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    context.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fill</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Path</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            ellipseIn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGRect</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">origin</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .zero, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: mySize)),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">linearGradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                Gradient</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">colors</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [.yellow, .orange]),</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                startPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .zero,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                endPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">CGPoint</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">x</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: mySize.width, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:mySize.height))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+p+'" alt="Image-2@2x"></p><h2 id="resizable-capinsets-resizingmode" tabindex="-1"><code>resizable(capInsets:resizingMode:)</code> <a class="header-anchor" href="#resizable-capinsets-resizingmode" aria-label="Permalink to &quot;`resizable(capInsets:resizingMode:)`&quot;">​</a></h2><p>设置 SwiftUI 调整图像大小以适应其空间的模式。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> resizable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    capInsets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: EdgeInsets </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> EdgeInsets</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    resizingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Image.ResizingMode </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .stretch</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image</span></span></code></pre></div><ul><li><code>capInsets</code>: 插入值，表示 SwiftUI 不调整大小的图像部分。</li><li><code>resizingMode</code>: SwiftUI 调整图像大小的模式。</li></ul><h3 id="image-resizingmode" tabindex="-1"><code>Image.ResizingMode</code> <a class="header-anchor" href="#image-resizingmode" aria-label="Permalink to &quot;`Image.ResizingMode`&quot;">​</a></h3><p>SwiftUI 用于调整图像大小以使其适合其包含视图的模式。</p><ul><li><code>stretch</code>: 一种放大或缩小图像大小以使其填充可用空间的模式。</li><li><code>tile</code>: 一种以原始大小重复图像的模式，根据需要重复多次以填充可用空间。</li></ul><h2 id="antialiased" tabindex="-1"><code>antialiased(_:)</code> <a class="header-anchor" href="#antialiased" aria-label="Permalink to &quot;`antialiased(_:)`&quot;">​</a></h2><p>指定 SwiftUI 在渲染图像时是否应用抗锯齿。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> antialiased</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isAntialiased: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image</span></span></code></pre></div><ul><li><code>isAntialiased</code>: 一个布尔值，指定是否允许抗锯齿。传递 <code>true</code> 以允许抗锯齿，否则传递 <code>false</code>。</li></ul><h2 id="symbolrenderingmode" tabindex="-1"><code>symbolRenderingMode(_:)</code> <a class="header-anchor" href="#symbolrenderingmode" aria-label="Permalink to &quot;`symbolRenderingMode(_:)`&quot;">​</a></h2><p>设置此视图内符号图像的渲染模式。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> symbolRenderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mode: SymbolRenderingMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image</span></span></code></pre></div><h3 id="symbolrenderingmode-1" tabindex="-1"><code>SymbolRenderingMode</code> <a class="header-anchor" href="#symbolrenderingmode-1" aria-label="Permalink to &quot;`SymbolRenderingMode`&quot;">​</a></h3><div class="info custom-block"><p class="custom-block-title"><code>hierarchical</code></p><p>一种将符号渲染为多个层的模式，对前景样式应用不同的不透明度。</p><p>SwiftUI 用前景样式填充第一层，用前景样式的次要和第三变体填充其他层。你可以使用 <code>foregroundStyle(_:_:)</code> 和 <code>foregroundStyle(_:_:_:)</code> 修饰符显式指定这些样式。如果你只指定了主要前景样式，SwiftUI 会自动从该样式派生其他样式。例如，你可以用紫色作为感叹号的色调颜色，用较低不透明度的紫色作为三角形的渲染一个填充的感叹号三角形：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exclamationmark.triangle.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">symbolRenderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.hierarchical)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.purple)</span></span></code></pre></div><p><img src="'+k+`" alt="SymbolRenderingModeHierarchical"></p></div><div class="info custom-block"><p class="custom-block-title"><code>monochrome</code></p><p>一种将符号渲染为填充前景样式的单个层的模式。</p><p>例如，你可以用紫色渲染一个填充的感叹号三角形：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exclamationmark.triangle.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">symbolRenderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.monochrome)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.purple)</span></span></code></pre></div><p><img src="`+d+`" alt="SymbolRenderingModeMonochrome"></p></div><div class="info custom-block"><p class="custom-block-title"><code>multicolor</code></p><p>一种将符号渲染为具有其继承样式的多个层的模式。</p><p>这些层可以用它们自己的固有样式或前景样式填充。例如，你可以用其固有颜色渲染一个填充的感叹号三角形，三角形为黄色，感叹号为白色：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exclamationmark.triangle.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">symbolRenderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.multicolor)</span></span></code></pre></div><p><img src="`+o+`" alt="SymbolRenderingModeMulticolor"></p></div><div class="info custom-block"><p class="custom-block-title"><code>palette</code></p><p>一种将符号渲染为多个层的模式，对这些层应用不同的样式。</p><p>在这种模式下，SwiftUI 将图像中连续定义的每个层映射到前景样式的主要、次要和第三变体中的下一个。你可以使用 <code>foregroundStyle(_:_:)</code> 和 <code>foregroundStyle(_:_:_:)</code> 修饰符显式指定这些样式。如果你只指定了主要前景样式，SwiftUI 会自动从该样式派生其他样式。例如，你可以用黄色作为感叹号的色调颜色，用青色填充三角形来渲染一个填充的感叹号三角形：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exclamationmark.triangle.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">symbolRenderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.palette)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.yellow, Color.cyan)</span></span></code></pre></div><p><img src="`+r+`" alt="SymbolRenderingModePalette"></p><p>你也可以省略符号渲染模式，因为指定多个前景样式意味着切换到调色板渲染模式：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;exclamationmark.triangle.fill&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.yellow, Color.cyan)</span></span></code></pre></div></div><h2 id="renderingmode" tabindex="-1"><code>renderingMode(_:)</code> <a class="header-anchor" href="#renderingmode" aria-label="Permalink to &quot;\`renderingMode(_:)\`&quot;">​</a></h2><p>指示 SwiftUI 是按原样渲染图像，还是使用不同的模式进行渲染。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> renderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> renderingMode: Image.TemplateRenderingMode</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image</span></span></code></pre></div><p><code>Image.TemplateRenderingMode</code> 枚举有两种情况：<code>Image.TemplateRenderingMode.original</code> 和 <code>Image.TemplateRenderingMode.template</code>。原始模式按原始源图像中的像素显示进行渲染。模板模式将所有不透明像素渲染为前景色，你可以将其用于创建图像蒙版等目的。</p><p>下面的示例展示了这两种渲染模式，应用于一个带有深绿色边框的绿色圆圈的图标图像：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dot_green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">renderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.original)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dot_green&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">renderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.template)</span></span></code></pre></div><p><img src="`+g+`" alt="SwiftUI-Image-TemplateRenderingMode-dots@2x"></p><p>你还可以使用 <code>renderingMode</code> 从 SF Symbols 集中生成多色系统图形。使用 <code>Image.TemplateRenderingMode.original</code> 模式将前景色应用于符号的所有部分，除了图形中具有明显颜色的部分。下面的示例展示了 <code>person.crop.circle.badge.plus</code> 符号的三种用法，以实现不同的效果：</p><ul><li><code>default</code>: 未指定前景色或模板渲染模式的默认外观。该符号在浅色模式下全部为黑色，在深色模式下全部为白色。</li><li><code>original</code>: 使用原始模板渲染模式和蓝色前景色实现的多色行为。此模式导致图形覆盖图像的独特部分的前景色，在本例中为加号图标。</li><li><code>template</code>: 使用带有蓝色前景色的模板渲染模式实现的单色模板行为。此模式将前景色应用于整个图像，而不管用户的外观偏好如何。</li></ul><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person.crop.circle.badge.plus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person.crop.circle.badge.plus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">renderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.original)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;person.crop.circle.badge.plus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">renderingMode</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.template)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">foregroundColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.blue)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">font</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.largeTitle)</span></span></code></pre></div><p><img src="`+c+'" alt="SwiftUI-Image-TemplateRenderingMode-sfsymbols@2x"></p><p>使用 SF Symbols 应用程序查找提供多色功能的系统图像。请记住，一些多色符号同时使用前景色和强调色。</p><h2 id="interpolation" tabindex="-1"><code>interpolation(_:)</code> <a class="header-anchor" href="#interpolation" aria-label="Permalink to &quot;`interpolation(_:)`&quot;">​</a></h2><p>指定需要插值的图像的当前渲染质量级别。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> interpolation</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> interpolation: Image.Interpolation) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image</span></span></code></pre></div><ul><li><code>interpolation</code>: 质量级别，表示为 <code>Interpolation</code> 类型的值，SwiftUI 在插值图像时应用该级别。</li></ul><h3 id="image-interpolation" tabindex="-1"><code>Image.Interpolation</code> <a class="header-anchor" href="#image-interpolation" aria-label="Permalink to &quot;`Image.Interpolation`&quot;">​</a></h3><ul><li><code>high</code>: 一个值，表示插值质量的高水平，这可能会减慢图像渲染速度。</li><li><code>low</code>: 一个值，表示插值质量的低水平，这可能会加快图像渲染速度。</li><li><code>medium</code>: 一个值，表示插值质量的中等水平，介于低质量和高质量值之间。</li><li><code>none</code>: 一个值，表示 SwiftUI 不插值图像数据。</li></ul><h2 id="alloweddynamicrange" tabindex="-1"><code>allowedDynamicRange(_:)</code> <a class="header-anchor" href="#alloweddynamicrange" aria-label="Permalink to &quot;`allowedDynamicRange(_:)`&quot;">​</a></h2><p>返回配置了指定允许动态范围的新图像。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> allowedDynamicRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> range: Image.DynamicRange</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Image</span></span></code></pre></div><p>下面的示例为特定的图像视图启用 HDR 渲染，假设图像具有 HDR（ITU-R 2100）色彩空间并且输出设备支持它：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hdr-asset&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">allowedDynamicRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.high)</span></span></code></pre></div><h3 id="image-dynamicrange" tabindex="-1"><code>Image.DynamicRange</code> <a class="header-anchor" href="#image-dynamicrange" aria-label="Permalink to &quot;`Image.DynamicRange`&quot;">​</a></h3><ul><li><code>standard</code>: 将图像内容动态范围限制为标准范围。</li><li><code>high</code>: 允许图像内容使用不受限制的扩展范围。</li><li><code>constrainedHigh</code>: 允许图像内容使用一些扩展范围。这适用于将 HDR 内容与 SDR 内容并排放置。</li></ul>',56);function ds(os,rs,gs,cs,Es,ys){return t(),e("div",null,[y,s("ul",null,[m,s("li",null,[u,i(": 一个可选的值，在 "),s("mjx-container",C,[(t(),e("svg",F,b)),T]),i(" 和 "),s("mjx-container",Q,[(t(),e("svg",w,x)),f]),i(" 之间，如果指定，渲染图像可以使用该值来定制其外观。如果符号不支持变量值，则此参数无效。")]),B]),I,s("ul",null,[M,s("li",null,[S,i(": 图像的比例因子，值如 "),s("mjx-container",A,[(t(),e("svg",q,V)),R]),i("、"),s("mjx-container",P,[(t(),e("svg",z,H)),Z]),i(" 或 "),s("mjx-container",G,[(t(),e("svg",U,j)),J]),i("。")]),O,$]),Y,s("ul",null,[X,s("li",null,[s("p",null,[K,i(": 一个可选的值，在 "),s("mjx-container",W,[(t(),e("svg",ss,as)),es]),i(" 和 "),s("mjx-container",ts,[(t(),e("svg",ns,hs)),ps]),i(" 之间，如果指定，渲染图像可以使用该值来定制其外观。如果符号不支持变量值，则此参数无效。使用 SF Symbols 应用程序查找支持变量值的符号。")])])]),ks])}const Cs=n(E,[["render",ds]]);export{us as __pageData,Cs as default};
