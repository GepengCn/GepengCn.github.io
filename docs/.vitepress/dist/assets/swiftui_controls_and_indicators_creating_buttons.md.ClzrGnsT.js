import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.C7sZLB-2.js";const n="/gepengcn.github.io/assets/Button-1@2x.Cf_x1rXQ.png",e="/gepengcn.github.io/assets/Button-2@2x.ehKvWcHi.png",h="/gepengcn.github.io/assets/Button-3@2x.DM0pvfzv.png",l="/gepengcn.github.io/assets/Button-4@2x.D5Nuht-Z.png",C=JSON.parse('{"title":"创建按钮","description":"","frontmatter":{},"headers":[],"relativePath":"swiftui/controls_and_indicators/creating_buttons.md","filePath":"swiftui/controls_and_indicators/creating_buttons.md","lastUpdated":1715833269000}'),p={name:"swiftui/controls_and_indicators/creating_buttons.md"},k=t(`<h1 id="创建按钮" tabindex="-1">创建按钮 <a class="header-anchor" href="#创建按钮" aria-label="Permalink to &quot;创建按钮&quot;">​</a></h1><h2 id="button" tabindex="-1"><code>Button</code> <a class="header-anchor" href="#button" aria-label="Permalink to &quot;\`Button\`&quot;">​</a></h2><p>启动操作的控件。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> View</span></span></code></pre></div><p>你可以通过提供操作和标签来创建按钮。操作是一个方法或闭包属性，当用户点击或点击按钮时会执行一些操作。标签是一个描述按钮操作的视图，例如，通过显示文本、图标或两者兼而有之。</p><p>按钮的标签可以是任何类型的视图，例如仅用于文本标签的 <code>Text</code> 视图：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: signIn) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sign In&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>或者 <code>Label</code> 视图，用于同时具有标题和图标的按钮：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: signIn) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sign In&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arrow.up&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>对于那些常见情况，你还可以使用便利初始化器，它们将标题字符串或 <code>LocalizedStringKey</code> 作为第一个参数，并可选地将系统图像名称或 <code>ImageResource</code> 作为第二个参数，而不是尾随闭包：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sign In&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arrow.up&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: signIn)</span></span></code></pre></div><p>在同时提供标题和图标时，更喜欢使用这些便利初始化器或 <code>Label</code> 视图。这允许按钮动态调整其外观，以在工具栏和菜单等容器中正确呈现其标题和图标。例如，在 iOS 上，按钮默认情况下仅在放置在工具栏中时显示其图标，但在菜单中同时显示前置标题和后置图标。以这种方式定义标签也有助于提高可访问性——例如，将带有 <code>iconOnly</code> 样式的 <code>labelStyle(_:)</code> 修饰符应用于按钮将导致它仅在视觉上显示其图标，但在 VoiceOver 等辅助功能模式下仍使用其标题来描述按钮：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sign In&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;arrow.up&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: signIn)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">labelStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.iconOnly)</span></span></code></pre></div><p>避免使用仅使用图像或完全没有辅助功能标签的纯视觉组件的标签。</p><p>用户激活按钮的方式因平台而异：</p><ul><li>在 iOS 和 watchOS 中，用户点击按钮。</li><li>在 macOS 中，用户点击按钮。</li><li>在 tvOS 中，用户在聚焦于按钮时按下外部遥控器（如 Siri 遥控器）上的“选择”。</li></ul><p>按钮的外观取决于多种因素，例如你放置它的位置、是否为其分配角色以及如何设置样式。</p><h3 id="将按钮添加到容器中" tabindex="-1">将按钮添加到容器中 <a class="header-anchor" href="#将按钮添加到容器中" aria-label="Permalink to &quot;将按钮添加到容器中&quot;">​</a></h3><p>使用按钮作为启动操作的任何用户界面元素。按钮会自动调整其视觉样式，以匹配这些不同容器和上下文中的预期样式。例如，要创建一个在用户选择时启动操作的列表单元格，请将按钮添加到列表的内容中：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">List</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // Cells that show all the current folders.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    ForEach</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folders) { folder </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(folder.title)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // A cell that, when selected, adds a new folder.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: addItem) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Add Folder&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;folder.badge.plus&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+n+`" alt="Button-1@2x"></p><p>同样，要创建一个启动操作的上下文菜单项，请将按钮添加到 <code>contextMenu(_:)</code> 修饰符的内容闭包中：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">contextMenu</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Cut&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: cut)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Copy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: copy)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Paste&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: paste)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+e+'" alt="Button-2@2x"></p><p>这种模式扩展到了 SwiftUI 中的大多数其他具有可定制的交互式内容的容器视图，如 <code>Form</code> 实例。</p><h3 id="分配角色" tabindex="-1">分配角色 <a class="header-anchor" href="#分配角色" aria-label="Permalink to &quot;分配角色&quot;">​</a></h3><p>你可以选择使用 <code>ButtonRole</code> 初始化按钮，以描述按钮的用途。例如，你可以为删除操作创建一个破坏性按钮：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Delete&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">role</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .destructive, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: delete)</span></span></code></pre></div><p>系统会在每个上下文中使用按钮的角色来适当地设置按钮的样式。例如，上下文菜单中的破坏性按钮会显示为红色前景色：</p><p><img src="'+h+`" alt="Button-3@2x"></p><p>如果你没有为按钮指定角色，系统会应用适当的默认外观。</p><h3 id="设置按钮样式" tabindex="-1">设置按钮样式 <a class="header-anchor" href="#设置按钮样式" aria-label="Permalink to &quot;设置按钮样式&quot;">​</a></h3><p>你可以使用标准按钮样式之一（如 <code>bordered</code>）自定义按钮的外观，并使用 <code>buttonStyle(_:)</code> 修饰符应用样式：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">HStack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Sign In&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: signIn)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Register&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: register)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">buttonStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.bordered)</span></span></code></pre></div><p>如果你将样式应用于容器视图，如上面的示例所示，则容器中的所有按钮都将使用该样式：</p><p><img src="`+l+`" alt="Button-4@2x"></p><p>你还可以创建自定义样式。要使用标准交互行为添加自定义外观，请创建符合 <code>ButtonStyle</code> 协议的样式。要自定义外观和交互行为，请创建符合 <code>PrimitiveButtonStyle</code> 协议的样式。自定义样式还可以读取按钮的角色并使用它来调整按钮的外观。</p><h2 id="从配置创建按钮" tabindex="-1">从配置创建按钮 <a class="header-anchor" href="#从配置创建按钮" aria-label="Permalink to &quot;从配置创建按钮&quot;">​</a></h2><p>根据具有自定义外观和自定义交互行为的样式的配置创建按钮。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> configuration: PrimitiveButtonStyleConfiguration)</span></span></code></pre></div><p>在 <code>PrimitiveButtonStyle</code> 的 <code>makeBody(configuration:)</code> 方法中使用此初始化器创建要设置样式的按钮实例。这对于修改当前按钮样式而不是实现全新样式的自定义按钮样式很有用。</p><p>例如，以下样式在按钮周围添加了红色边框，但除此之外保留了按钮的当前样式：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RedBorderedButtonStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">PrimitiveButtonStyle </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeBody</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">configuration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Configuration) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(configuration)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">border</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(Color.red)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="buttonstyle" tabindex="-1"><code>buttonStyle(_:)</code> <a class="header-anchor" href="#buttonstyle" aria-label="Permalink to &quot;\`buttonStyle(_:)\`&quot;">​</a></h2><p>将此视图内的按钮样式设置为具有自定义外观和标准交互行为的按钮样式。</p><ul><li><code>automatic</code>: 基于按钮上下文的默认按钮样式。</li><li><code>accessoryBar</code>: 一种按钮样式，通常用于辅助工具栏（有时称为“范围栏”）的上下文中，用于缩小搜索或其他操作的焦点的按钮。</li><li><code>accessoryBarAction</code>: 一种按钮样式，用于在辅助工具栏中执行额外的操作。</li><li><code>bordered</code>: 一种基于按钮上下文应用标准边框图形的按钮样式。</li><li><code>borderedProminent</code>: 一种基于按钮上下文应用标准边框突出显示图形的按钮样式。</li><li><code>borderless</code>: 一种不应用边框的按钮样式。</li><li><code>card</code>: 一种不填充内容的按钮样式，并在按钮获得焦点时应用运动效果。</li><li><code>link</code>: 一种用于模拟链接的按钮样式。</li><li><code>plain</code>: 一种在空闲时不对其内容进行样式设置或修饰，但可能应用视觉效果来指示按钮的按下、聚焦或启用状态的按钮样式。</li></ul><h2 id="buttonbordershape" tabindex="-1"><code>buttonBorderShape(_:)</code> <a class="header-anchor" href="#buttonbordershape" aria-label="Permalink to &quot;\`buttonBorderShape(_:)\`&quot;">​</a></h2><p>设置此视图中按钮的边框形状。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buttonBorderShape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> shape: ButtonBorderShape) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View</span></span></code></pre></div><p>边框形状用于绘制带边框按钮的盘片。在 macOS 上，指定的边框形状仅应用于小部件中的带边框按钮。</p><ul><li><code>automatic</code>: 一种形状，它委托系统根据给定的上下文和平台确定适当的形状。</li><li><code>capsule</code>: 胶囊形状。</li><li><code>circle</code>: 圆形。</li><li><code>roundedRectangle</code>: 圆角矩形形状。</li></ul><h2 id="buttonrepeatbehavior" tabindex="-1"><code>buttonRepeatBehavior(_:)</code> <a class="header-anchor" href="#buttonrepeatbehavior" aria-label="Permalink to &quot;\`buttonRepeatBehavior(_:)\`&quot;">​</a></h2><p>设置此视图中的按钮是否应在长时间交互时重复触发其操作。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> buttonRepeatBehavior</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> behavior: ButtonRepeatBehavior) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View</span></span></code></pre></div><ul><li><code>behavior</code>: <code>behavior</code> 的值为 <code>enabled</code> 表示按钮应启用重复行为，值为 <code>disabled</code> 表示按钮应禁止重复行为。</li></ul><p>将此应用于递增或递减值或执行其他固有迭代操作的按钮。诸如按下并按住按钮、按住按钮的键盘快捷键或在按钮聚焦时按住空格键等交互将触发此重复行为。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Button</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    playbackSpeed.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">advance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    Label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Speed up&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">systemImage</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hare&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">buttonRepeatBehavior</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(.enabled)</span></span></code></pre></div><p>这会影响所有系统按钮样式，并自动影响符合 <code>ButtonStyle</code> 的自定义类型。这不会自动应用于符合 <code>PrimitiveButtonStyle</code> 的自定义类型，并且应使用 <code>EnvironmentValues.buttonRepeatBehavior</code> 值来适当地调整其自定义手势。</p>`,58),d=[k];function o(E,r,c,g,y,u){return a(),i("div",null,d)}const b=s(p,[["render",o]]);export{C as __pageData,b as default};
