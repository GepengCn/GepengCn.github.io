import{_ as a,c as e,o as t,a4 as o}from"./chunks/framework.B8OCIuDt.js";const r="/visionOS/assets/Collection.BEb0gJ_G.png",u=JSON.parse('{"title":"集合类型","description":"","frontmatter":{},"headers":[],"relativePath":"swift/collection.md","filePath":"swift/collection.md"}'),i={name:"swift/collection.md"},c=o('<h1 id="集合类型" tabindex="-1">集合类型 <a class="header-anchor" href="#集合类型" aria-label="Permalink to &quot;集合类型&quot;">​</a></h1><p>Swift 语言提供了三种基本的集合类型来存储数据集：数组（Array）、集合（Set）和字典（Dictionary）。数组用于存储有序的数据集合，集合用于存储一个无序且不包含重复元素的数据集，而字典则存储无序的键值对数据集。</p><p><img src="'+r+'" alt="Collection"></p><p>数组、集合和字典都要求明确指定存储的数据类型。这种类型安全的设计确保了不能插入错误的数据类型，同时你也可以放心，从这些集合中取出的数据类型是预期的和一致的。</p><h2 id="集合的可变性" tabindex="-1">集合的可变性 <a class="header-anchor" href="#集合的可变性" aria-label="Permalink to &quot;集合的可变性&quot;">​</a></h2><p>在 Swift 中，如果你将一个数组、集合或字典分配给一个「变量」，那么这个集合是「可变的」。这意味着你可以在创建后随时添加、修改或删除数据项。相反，如果你将这些集合类型分配给一个「常量」，则它们变为「不可变的」，其内容和大小将无法更改。</p><h2 id="数组-arrays" tabindex="-1">数组（Arrays） <a class="header-anchor" href="#数组-arrays" aria-label="Permalink to &quot;数组（Arrays）&quot;">​</a></h2><p>数组使用有序列表存储同一类型的多个值。相同的值可以多次出现在一个数组的不同位置中。</p><h3 id="数组的简单语法" tabindex="-1">数组的简单语法 <a class="header-anchor" href="#数组的简单语法" aria-label="Permalink to &quot;数组的简单语法&quot;">​</a></h3><p>在 Swift 中，数组的完整类型标注是 <code>Array&lt;Element&gt;</code>，这里的 <code>Element</code> 表示数组中允许的唯一数据类型。你也可以使用更简洁的语法 <code>[Element]</code> 来定义数组。虽然这两种表达方式在功能上完全相同，推荐使用简短的形式 <code>[Element]</code>。在本文中，我们将一直采用这种简洁的语法来处理数组。</p><h3 id="创建一个空数组" tabindex="-1">创建一个空数组 <a class="header-anchor" href="#创建一个空数组" aria-label="Permalink to &quot;创建一个空数组&quot;">​</a></h3>',11),l=[c];function n(s,d,h,_,p,m){return t(),e("div",null,l)}const b=a(i,[["render",n]]);export{u as __pageData,b as default};
