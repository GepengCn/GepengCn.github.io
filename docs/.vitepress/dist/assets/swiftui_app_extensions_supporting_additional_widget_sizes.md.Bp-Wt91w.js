import{_ as s,c as i,o as a,a4 as n}from"./chunks/framework.C7sZLB-2.js";const E=JSON.parse('{"title":"Supporting additional widget sizes","description":"","frontmatter":{},"headers":[],"relativePath":"swiftui/app_extensions/supporting_additional_widget_sizes.md","filePath":"swiftui/app_extensions/supporting_additional_widget_sizes.md","lastUpdated":1714970771000}'),t={name:"swiftui/app_extensions/supporting_additional_widget_sizes.md"},e=n(`<h1 id="supporting-additional-widget-sizes" tabindex="-1">Supporting additional widget sizes <a class="header-anchor" href="#supporting-additional-widget-sizes" aria-label="Permalink to &quot;Supporting additional widget sizes&quot;">​</a></h1><p>通过添加对多种小组件尺寸的支持，可以在更多场景下提供小组件服务。</p><p>在你的应用中添加小组件扩展并创建首个小组件之后，你需要添加代码来声明应用支持的其他小组件类型，这可通过使用 <code>supportedFamilies(_:)</code> 属性修饰符实现。你使用的尺寸取决于你的应用支持的设备类型。如果你的应用支持多个平台，请确保有条件地声明支持的小组件家族。</p><p>以下来自「<a href="https://developer.apple.com/documentation/widgetkit/emoji-rangers-supporting-live-activities-interactivity-and-animations" target="_blank" rel="noreferrer">Emoji Rangers: Supporting Live Activities, interactivity, and animations</a>」示例代码项目的例子，展示了如何在 <code>Widget</code> 实现中声明多种小组件尺寸。该应用在 watchOS 和 iOS 平台上均支持附件小组件，并在 iOS 平台上支持 <code>WidgetFamily.systemSmall</code> 和 <code>WidgetFamily.systemMedium</code> 两种尺寸的小组件。注意，这里使用了 \`\`#if os(watchOS)\` 宏，确保为每个平台正确声明所支持的小组件家族。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WidgetConfiguration {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    makeWidgetConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">configurationDisplayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Ranger Detail&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;See your favorite ranger.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> os</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">watchOS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">supportedFamilies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([.accessoryCircular,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            .accessoryRectangular, .accessoryInline])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">supportedFamilies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([.accessoryCircular,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            .accessoryRectangular, .accessoryInline,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                            .systemSmall, .systemMedium, .systemLarge])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        #</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">endif</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="update-swiftui-views-to-support-additional-sizes" tabindex="-1">Update SwiftUI views to support additional sizes <a class="header-anchor" href="#update-swiftui-views-to-support-additional-sizes" aria-label="Permalink to &quot;Update SwiftUI views to support additional sizes&quot;">​</a></h2><p>在你的 <code>Widget</code> 中声明支持额外的小组件尺寸后，你需要更新小组件视图以适应这些新增尺寸。在你的视图代码中：</p><ul><li>使用 <code>widgetFamily</code> 环境变量来检测不同的小组件家族。</li><li>为每种尺寸构建相应的视图，并包含处理诸如活力（ <code>vibrant</code> ）模式和深色模式等外观变化的代码。要了解更多详情，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/preparing-widgets-for-additional-contexts-and-appearances" target="_blank" rel="noreferrer">Preparing widgets for additional platforms, contexts, and appearances</a>」。</li></ul><p>下面的例子摘自「<a href="https://developer.apple.com/documentation/widgetkit/emoji-rangers-supporting-live-activities-interactivity-and-animations" target="_blank" rel="noreferrer">Emoji Rangers: Supporting Live Activities, interactivity, and animations</a>」示例代码项目，它展示了一个简化的代码片段。根据不同的小组件家族条件性地返回合适的SwiftUI视图。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> EmojiRangerWidgetEntryView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">View </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry: Provider.Entry</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.widgetFamily) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> family</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ViewBuilder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> family {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .accessoryCircular</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Code to construct the view for the circular accessory widget or watch complication.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .accessoryRectangular</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Code to construct the view for the rectangular accessory widget or watch complication.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .accessoryInline</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Code to construct the view for the inline accessory widget or watch complication.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .systemSmall</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Code to construct the view for the small widget.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .systemLarge</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Code to construct the view for the large widget.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .systemMedium</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Code to construct the view for the medium widget.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // Code to construct the view for other widgets, for example, the extra large widget.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>利用 Xcode 预览功能，你可以无需在模拟器或实际设备上运行应用，即可查看小组件的设计效果。若想了解更多信息，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/creating-a-widget-extension#Preview-widgets-in-Xcode" target="_blank" rel="noreferrer">Preview widgets in Xcode</a>」。</p></div>`,11),p=[e];function l(h,k,r,d,o,c){return a(),i("div",null,p)}const y=s(t,[["render",l]]);export{E as __pageData,y as default};
