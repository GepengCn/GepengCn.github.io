import{_ as s,c as i,o as a,a4 as t}from"./chunks/framework.C7sZLB-2.js";const g=JSON.parse('{"title":"并发","description":"","frontmatter":{},"headers":[],"relativePath":"swift/concurrency.md","filePath":"swift/concurrency.md","lastUpdated":1714218490000}'),n={name:"swift/concurrency.md"},h=t(`<h1 id="并发" tabindex="-1">并发 <a class="header-anchor" href="#并发" aria-label="Permalink to &quot;并发&quot;">​</a></h1><iframe style="border:none;" width="100%" height="450" src="https://whimsical.com/embed/BCfptC7Nc6WLHA9ZSEQzzm"></iframe><p>Swift 对于编写异步和并行代码提供了原生支持，这使得结构化的并发编程变得更为简洁和安全。</p><div class="tip custom-block"><p class="custom-block-title">异步代码</p><p>允许程序在执行长时间操作（如文件下载或解析）时，暂停这些操作，转而执行其他较短的任务，比如更新用户界面。</p><p>这种能力称为 「挂起」 和 「继续执行」，它在单线程中有效地管理任务，确保同一时间内只执行一段代码。</p></div><div class="tip custom-block"><p class="custom-block-title">并行代码</p><p>指的是多个代码块能够同时执行。</p><p>例如，一个四核处理器的计算机可以在每个核上同时运行不同的代码块，从而加快处理速度。</p></div><ul><li>将这两种能力结合使用，Swift 程序可以更高效地处理多任务，例如在等待外部系统响应时暂停当前任务，同时执行其他计算任务。</li><li>这样不仅提升了程序的性能，还简化了内存管理，因为 Swift 的并发模型在编译时就能帮助开发者识别潜在的错误。</li></ul><p>然而，引入并发和异步操作会增加编程的复杂性。</p><p>为此 Swift 提供了一些工具，如 <code>actor</code>，这些工具能安全地管理并发访问可变状态，减少错误发生的机会。</p><p>需要注意的是，仅仅为了加快程序运行速度而随意引入并发，不仅可能无益，反而可能增加代码的错误和复杂度。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>在 Swift 的并发模型中，你不需要直接管理线程。相反，当你使用异步函数时，这些函数可以在执行过程中「交出」它们在某个线程上的运行权。</p><p>这样做的好处是，如果一个异步函数需要等待某些操作（例如，等待数据加载），它可以让出线程，允许其他异步函数使用这个线程继续运行。</p><p>重要的是要理解，当一个异步函数准备恢复执行时，它可能不会在同一个线程上运行。</p><p>Swift 的系统会自动为这些函数分配线程，这有助于简化程序设计，你不需要担心线程的具体管理问题，只需关注函数的逻辑即可。</p></div><p>你当然也可以不用 Swift 原生支持去写并发的代码，只不过代码的可读性会下降。</p><p>比如，下面的这段代码会拉取一系列图片名称的列表，下载列表中的图片然后展示给用户：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">listPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Summer Vacation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { photoNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photoNames.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNames[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: name) { photo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(photo)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个简单的案例中，由于代码中有一系列的 <code>completion handler</code>，最终你必须得使用嵌套闭包。</p><p>更加复杂的代码会产生更深的嵌套，从而使代码迅速变得臃肿起来。</p><h2 id="定义和调用异步函数" tabindex="-1">定义和调用异步函数 <a class="header-anchor" href="#定义和调用异步函数" aria-label="Permalink to &quot;定义和调用异步函数&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">异步函数或方法在 Swift 中是一种特殊的函数，它们可以在执行过程中被暂停，并在适当的时候继续执行</p><p>这与传统的同步函数不同，后者只能一直运行直到完成任务、抛出错误或者永久停止返回。</p><p>异步函数不仅能完成这些功能，还能在等待外部资源如网络响应时暂停执行。</p></div><p>要声明一个异步函数或方法，你可以在其返回类型前使用 <code>async</code> 关键字，类似于用 <code>throws</code> 关键字标记可能抛出错误的函数。</p><p>例如，下面的方法从图库中拉取图片名称列表：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 省略异步网络请求代码</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>对于那些既可能抛出错误又是异步的函数，应将 <code>async</code> 关键字置于 <code>throws</code> 之前。</p></div><p>当调用一个异步函数时，你需要使用 <code>await</code> 关键字<strong>来标记可能的挂起点</strong>，这与使用 <code>try</code> 标记可能抛出错误的地方类似。</p><div class="tip custom-block"><p class="custom-block-title">挂起点</p><p>在使用 <code>await</code> 的地方，代码会暂停执行，等待异步方法的结果，这被称为挂起点，是代码执行可以暂停并在未来某一时刻恢复的地方。</p></div><ul><li>在异步函数中，代码只有在调用其他异步函数时才会挂起；</li><li>并且挂起操作是显式的，不会自动发生。</li></ul><p>例如，下面的代码段展示了如何拉取图库中所有图片的名称并显示第一张图片：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photoNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> listPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Summer Vacation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photoNames.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sorted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> sortedNames[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: name)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(photo)</span></span></code></pre></div><p>因为 <code>listPhotos(inGallery:)</code> 和 <code>downloadPhoto(named:)</code> 都需要时间来完成网络请求，将它们定义为异步函数允许程序在等待这些操作时继续执行其他任务。</p><div class="info custom-block"><p class="custom-block-title">执行顺序</p><ol><li>代码从第一行开始执行到第一个 <code>await</code>，调用 <code>listPhotos(inGallery:)</code> 函数并挂起当前代码块，等待函数返回。</li><li>当代码挂起时，Swift 允许其他代码块继续执行。例如，可能有其他并行任务正在后台更新不同的图库。</li><li>一旦 <code>listPhotos(inGallery:)</code> 函数返回，代码从挂起点恢复执行，继续处理返回的 <code>photoNames</code>。</li><li><code>sortedNames</code> 和 <code>name</code> 的定义是同步执行的，因为它们不涉及异步调用，因此不会产生挂起点。</li><li>当代码到达调用 <code>downloadPhoto(named:)</code> 的 <code>await</code> 时，再次挂起，等待照片下载完成。</li><li>下载完成后，代码继续执行，显示下载的照片。</li></ol></div><div class="tip custom-block"><p class="custom-block-title">让出线程</p><p><code>await</code> 关键字的使用，确保了在这些异步操作完成前，相关代码不会继续执行，从而使得其他任务能够有效利用等待时间。这种方式称为「让出线程」 <code>yielding the thread</code> ，即允许当前线程去执行其他任务，而不是空闲等待。</p></div><p>此外，对于需要确保操作顺序的场景，例如将图片从一个图库移到另一个图库，这样的操作要求在移动操作完成前后保持<strong>一致性</strong>，<strong>不能有其他并发操作</strong>插入：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> listPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Summer Vacation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firstPhoto, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Road Trip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 此时，firstPhoto暂时地同时存在于两个图库中</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firstPhoto, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fromGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Summer Vacation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>为此，<strong>可以将这一系列操作「封装到一个同步函数中」，确保执行过程中不会被异步操作打断</strong>：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">_</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photoName: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> source: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> destination: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(photoName, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: destination)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    remove</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(photoName, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: source)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> listPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Summer Vacation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">move</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(firstPhoto, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Summer Vacation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Road Trip&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>在上例中，由于 <code>move(_:from:to:)</code> 函数为同步函数，能够保证它将不会包含潜在的挂起点。</p><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>在未来，试图在该函数中写入并发代码将引发编译错误而非产生bug。</p></div><div class="warning custom-block"><p class="custom-block-title"><code>Task.sleep(_:)</code></p><p>这个方法什么都没有做，只是等待不少于指定的时间（单位纳秒）后返回。</p><p>下面是使用 <code>sleep(until:clock:)</code> 方法模拟网络请求实现 <code>listPhotos(inGallery:)</code> 的一个版本：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">inGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> throws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Task.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sleep</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">until</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .now </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">seconds</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">clock</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .continuous) </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IMG001&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IMG99&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;IMG0404&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div><h2 id="异步序列" tabindex="-1">异步序列 <a class="header-anchor" href="#异步序列" aria-label="Permalink to &quot;异步序列&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">如果你想「逐个」（ <code>one by one</code> ）处理异步产生的数据，可以使用异步序列</p><p>这种方法比起一次性返回所有数据，可以更有效地处理流式数据，例如从文件读取行或者网络请求返回的数据流。</p></div><p>在上面的示例中，我们使用了一个 <code>for-await-in</code> 循环来遍历一个异步序列。</p><ul><li>这个循环类似于常见的 <code>for-in</code> 循环，但它添加了 <code>await</code> 关键字，表示在遍历过程中可能会有挂起的操作。</li><li>这是因为每个新的元素获取可能需要等待，例如等待下一行文本从标准输入读取完毕。</li><li>这里的每次迭代都可能暂停执行，直到下一个元素准备就绪。</li></ul><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FileHandle.standardInput</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> try</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> line </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handle.bytes.lines {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(line)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这段代码中，我们监听标准输入，每接收到一行文本，就会输出这行文本。</p><p>使用 <code>for-await-in</code> 循环允许程序在数据准备就绪前暂时挂起，从而不会阻塞程序的其他部分。</p><div class="tip custom-block"><p class="custom-block-title"><code>Sequence &amp; AsyncSequence</code></p><p>想让自己创建的类型使用 <code>for-in</code> 循环需要遵循 <a href="https://developer.apple.com/documentation/swift/sequence" target="_blank" rel="noreferrer"><code>Sequence</code></a> 协议。</p><p>如果想让自己创建的类型使用 <code>for-await-in</code> 循环，就需要遵循 <a href="https://developer.apple.com/documentation/swift/asyncsequence" target="_blank" rel="noreferrer"><code>AsyncSequence</code></a> 协议。</p></div><h2 id="并行异步方法" tabindex="-1">并行异步方法 <a class="header-anchor" href="#并行异步方法" aria-label="Permalink to &quot;并行异步方法&quot;">​</a></h2><p>调用异步函数可以使用 <code>await</code> 关键字确保函数在继续执行下一行代码之前完成。</p><p>然而，若是采用单个 <code>await</code> 逐个执行异步任务，如下图中的例子，会导致每个任务必须等待前一个任务完成才能开始：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: photoNames[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: photoNames[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thirdPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: photoNames[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [firstPhoto, secondPhoto, thirdPhoto]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(photos)</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">这种方法虽然直观，但并不高效，因为它没有利用异步操作的并发优势</p><p>每张图片的下载需要等待上一张下载完毕，这样就不能同时下载多张图片。</p></div><p>为了提高效率，Swift 提供了 <code>async let</code> 语法，允许同时启动多个异步任务。</p><p>这样，多个下载任务可以并发进行，而不需要等待彼此：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> firstPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: photoNames[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> secondPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: photoNames[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line highlighted"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> thirdPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: photoNames[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photos </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [firstPhoto, secondPhoto, thirdPhoto]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">show</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(photos)</span></span></code></pre></div><ul><li>在这个改进的例子中，三个下载任务几乎同时开始，不必等待前一个任务完成。</li><li>这三个任务都被标记为 <code>async let</code>，表示它们是并发的异步调用。</li><li>你只在需要结果来进行下一步操作时（比如展示这些图片），用 <code>await</code> 操作等待所有异步操作完成。</li></ul><h2 id="任务和任务组" tabindex="-1">任务和任务组 <a class="header-anchor" href="#任务和任务组" aria-label="Permalink to &quot;任务和任务组&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">任务</p><ul><li>任务（ <code>task</code> ) 是一项工作，可以作为程序的一部分并发执行。</li><li>所有的异步代码都属于某个任务。</li><li>上一部分介绍的 <code>async-let </code>语法就会产生一个子任务。</li></ul></div><div class="tip custom-block"><p class="custom-block-title">任务组</p><p>你也可以创建一个任务组并且给其中添加子任务，这可以让你对优先级和任务取消有了更多的掌控力，并且可以控制任务的数量。</p></div><div class="tip custom-block"><p class="custom-block-title">结构化并发</p><p>任务是按层级结构排列的。同一个任务组中的任务拥有相同的父任务，并且每个任务都可以添加子任务。</p><p>由于任务和任务组之间明确的关系，这种方式又被称为结构化并发（ <code>structured concurrency</code> ）。</p></div><p>虽然你需要确保代码的正确性，但任务间明确的父子关系让 Swift 能替你处理一些如扩散取消（ <code>propagating cancellation</code> ）之类的行为，并且能让 Swift 在编译阶段发现一些错误。</p><h3 id="示例解析" tabindex="-1">示例解析 <a class="header-anchor" href="#示例解析" aria-label="Permalink to &quot;示例解析&quot;">​</a></h3><p>我们来看一个具体的例子，这个例子中我们要下载一个相册中的所有照片：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> withTaskGroup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: Data.</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) { taskGroup </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 首先获取相册中的所有照片名称</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photoNames </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> listPhotos</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">inGallery</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Summer Vacation&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    // 为每一个照片名称创建一个下载任务</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> name </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> photoNames {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        taskGroup.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addTask</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 这里是每个子任务的内容：下载一张照片</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> downloadPhoto</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">named</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: name)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个代码中：</p><ol><li><strong>获取照片名称</strong>：首先，我们使用 <code>await listPhotos(inGallery:)</code> 异步获取一个相册中的照片列表。这个调用是异步的，意味着程序会等待这个操作完成才继续执行。</li><li><strong>创建任务组</strong>：使用 <code>withTaskGroup</code> 创建一个任务组，允许我们添加多个任务（每个任务是一个照片的下载操作）。</li><li><strong>添加任务到任务组</strong>：对于相册中的每张照片，我们通过 <code>taskGroup.addTask</code> 添加一个新的任务到任务组中。每个任务是独立执行的，这意味着所有的下载可以同时进行，而不是一张一张顺序下载。</li><li><strong>执行并等待所有任务完成</strong>：任务组会自动处理所有任务的并发执行，并且 <code>await withTaskGroup</code> 表示程序会在这个点暂停，直到所有的下载任务完成。</li></ol><h3 id="非结构化并发" tabindex="-1">非结构化并发 <a class="header-anchor" href="#非结构化并发" aria-label="Permalink to &quot;非结构化并发&quot;">​</a></h3><p>对于并发来说，除了上一部分讲到的结构化的方式，Swift 还支持非结构化并发。</p><div class="warning custom-block"><p class="custom-block-title">与任务组中的任务不同的是，非结构化任务（ <code>unstructured task</code> ）并没有父任务</p><p>你能以任何方式来处理非结构化任务以满足你程序的需要，但与此同时，你需要对于他们的正确性付全责。</p></div><ul><li>如果想创建一个在当前 <code>actor</code> 上运行的非结构化任务，需要调用构造器 <code>Task.init(priority:operation:)</code>。</li><li>如果想要创建一个不在当前 <code>actor</code> 上运行的非结构化任务（更具体地说就是游离任务（ <code>detached task</code> ）），需要调用类方法 <code>Task.detached(priority:operation:)</code>。</li></ul><p>以上两种方法都能返回一个能让你与任务交互（继续等待结果或取消任务）的任务句柄，如下例：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> newPhoto </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // ... 图片数据 ...</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handle </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Task</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> add</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(newPhoto, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">toGalleryNamed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Spring Adventures&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> handle.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span></span></code></pre></div><h3 id="任务取消" tabindex="-1">任务取消 <a class="header-anchor" href="#任务取消" aria-label="Permalink to &quot;任务取消&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">Swift 中的并发使用<strong>合作取消模型</strong></p><p>每个任务都会在执行中合适的时间点检查自己是否被取消了，并且会用任何合适的方式来响应取消操作。这些方式会根据你所执行的工作分为以下几种：</p><ul><li>抛出如 <code>CancellationError</code> 这样的错误</li><li>返回 <code>nil</code> 或者空的集合</li><li>返回完成一半的工作</li></ul></div><p>如果想检查任务是否被取消</p><ul><li>既可以使用 <a href="https://developer.apple.com/documentation/swift/task/checkcancellation()" target="_blank" rel="noreferrer"><code>Task.checkCancellation()</code></a> （如果任务取消会返回 <code>CancellationError</code> ）</li><li>也可以使用 <a href="https://developer.apple.com/documentation/swift/task/iscancelled-swift.type.property" target="_blank" rel="noreferrer"><code>Task.isCancelled</code></a> 来判断，继而在代码中对取消进行相应的处理。</li></ul><p>比如，一个从图库中下载图片的任务需要删除下载到一半的文件并且关闭连接。</p><p>如果想手动执行扩散取消，调用 <a href="https://developer.apple.com/documentation/swift/task/cancel()" target="_blank" rel="noreferrer"><code>Task.cancel()</code></a>。</p><h2 id="actors" tabindex="-1">Actors <a class="header-anchor" href="#actors" aria-label="Permalink to &quot;Actors&quot;">​</a></h2><p>你可以使用任务来将自己的程序分割为孤立、并发的部分。任务间相互孤立，这也使得它们能够安全地同时运行。</p><div class="tip custom-block"><p class="custom-block-title">但有时你需要在任务间共享信息。<code>Actors</code> 便能够帮助你安全地在并发代码间分享信息</p><p>跟类一样，<code>actor</code> 也是一个引用类型，所以<strong>类是引用类型</strong>中关于值类型和引用类型的比较同样适用于 <code>actor</code> 和类。</p><p>不同于类的是，<code>actor</code> 在同一时间只允许一个任务访问它的可变状态，这使得多个任务中的代码与一个 <code>actor </code>交互时更加安全。</p></div><p>比如，下面是一个记录温度的 <code>actor</code>：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">actor</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TemperatureLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> measurements: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    private</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">measurement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.label </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> label</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.measurements </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [measurement]</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> measurement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>你可以使用与结构体和类初始化相同的语法创建一个 <code>actor</code>。</p><p>当你访问 <code>actor</code> 中的属性或方法时，需要使用 <code>await</code> 来标记潜在的挂起点，比如：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TemperatureLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Outdoors&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">measurement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">max</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出 &quot;25&quot;</span></span></code></pre></div><p>相比之下，<code>actor</code> 内部的代码在访问其属性的时候不需要添加 <code>await</code> 关键字。</p><p>比如，下面的方法是更新 <code>TemperatureLogger</code> 中的温度：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TemperatureLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> measurement: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        measurements.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(measurement)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> measurement </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> max {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            max </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> measurement</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="可发送类型" tabindex="-1">可发送类型 <a class="header-anchor" href="#可发送类型" aria-label="Permalink to &quot;可发送类型&quot;">​</a></h2><p>任务和 <code>Actor</code> 能够帮助你将程序分割为能够安全地并发运行的小块。</p><div class="info custom-block"><p class="custom-block-title">并发域</p><p>在一个任务中，或是在一个 <code>Actor</code> 实例中，程序包含可变状态的部分（如变量和属性）被称为并发域（ <code>Concurrency domain</code> ）。</p></div><p>部分类型的数据不能在并发域间共享，因为它们包含了可变状态，但它不能阻止重叠访问。</p><p><strong>能够在并发域间共享的类型</strong>被称为可发送类型( <code>Sendable Type</code> )。</p><p>例如在调用 <code>Actor</code> 方法时被作为实参传递，或是作为任务的结果返回。</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ul><li><p>本章之前的例子并未讨论可发送性，因为这些例子均使用了简单值类型，对于在并发域间传递的数据而言，简单值类型总是安全的。</p></li><li><p>而与之相反，另一些类型并不能安全地在并发域间传递。</p></li></ul><p>例如，当你在不同的任务间传递该类的实例时，包含可变属性且并未序列化「对这些属性的访问的类」可能产生不可预测和不正确的结果。</p></div><p>你可以通过声明其符合 <code>Sendable</code> 协议来将某个类型标记为可发送类型。</p><p>该协议并不包含任何代码要求，但 Swift 对其做出了强制的语义要求。</p><div class="tip custom-block"><p class="custom-block-title">有三种方法将一个类型声明为可发送类型：</p><ul><li>该类型为值类型，且其可变状态由其它可发送数据构成——例如具有存储属性的结构体或是具有关联值的枚举。</li><li>该类型不包含任何可变状态，且其不可变状态由其它可发送数据构成——例如只包含只读属性的结构体或类</li><li>该类型包含能确保其可变状态安全的代码——例如标记了 <code>@MainActor</code> 的类或序列化了对特定线程/队列上其属性的访问的类。</li></ul></div><h3 id="示例解释" tabindex="-1">示例解释 <a class="header-anchor" href="#示例解释" aria-label="Permalink to &quot;示例解释&quot;">​</a></h3><p>来看一个例子，帮助理解这些概念：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TemperatureReading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Sendable </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> measurement: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Int</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">extension</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TemperatureLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> addReading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reading: TemperatureReading) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        measurements.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">append</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(reading.measurement)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TemperatureLogger</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Tea kettle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">measurement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">85</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> reading </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> TemperatureReading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">measurement</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">45</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addReading</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: reading)</span></span></code></pre></div><p>在这个例子中：</p><ul><li><code>TemperatureReading</code> 是一个结构体，它包含一个整型的 <code>measurement</code>。因为它是结构体（值类型），并且它的属性也是基本数据类型（整型），所以它自动满足 <code>Sendable</code> 协议的要求，可以在并发域间安全传递。</li><li><code>TemperatureLogger</code> 是一个 <code>actor</code>。当 <code>TemperatureReading</code> 作为参数传递给它的 <code>addReading</code> 方法时，我们使用 <code>await</code> 来确保在安全的时刻访问 <code>actor</code>，防止数据竞争。</li></ul>`,101),l=[h];function p(k,e,d,r,E,o){return a(),i("div",null,l)}const y=s(n,[["render",p]]);export{g as __pageData,y as default};
