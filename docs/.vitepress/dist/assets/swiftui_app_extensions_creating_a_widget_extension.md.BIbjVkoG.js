import{_ as n,c as a,l as i,a as e,a4 as s,o as t}from"./chunks/framework.C7sZLB-2.js";const l="/gepengcn.github.io/assets/WidgetKit-Add-Widget-Extension@2x.BTroB0l0.png",f=JSON.parse('{"title":"Creating a widget extension","description":"","frontmatter":{},"headers":[],"relativePath":"swiftui/app_extensions/creating_a_widget_extension.md","filePath":"swiftui/app_extensions/creating_a_widget_extension.md","lastUpdated":1714970771000}'),p={name:"swiftui/app_extensions/creating_a_widget_extension.md"},h=s('<h1 id="creating-a-widget-extension" tabindex="-1">Creating a widget extension <a class="header-anchor" href="#creating-a-widget-extension" aria-label="Permalink to &quot;Creating a widget extension&quot;">​</a></h1><p>在不同设备上以便捷、信息丰富的小组件形式展示你的应用内容。</p><p>小组件可以显示相关且一目了然的内容，用户能快速访问获取更多详细信息。你的应用程序可以提供多种小组件，让用户能够专注于对他们来说最重要的信息。</p><p>开始使用小组件和 <code>WidgetKit</code> 的好方法是向你的应用添加一个静态小组件。静态小组件无需用户进行任何配置。例如，一个静态小组件可能显示股市概览，或者用户日历上的下一个事件。小组件显示的数据是动态的，但显示的数据类型是固定的。考虑一下你的应用所呈现的信息，选择一种用户会觉得在他们的设备上一眼就能看到很有用的信息。</p><p>小组件可以以多种大小显示数据，从小巧的手表复杂功能或动态岛展示，到超大的 iPad 和 macOS 小组件。下面的例子重点关注单一尺寸的小组件，即小型系统尺寸（ <code>WidgetFamily.systemSmall</code> ）。这个示例小组件展示了假设游戏的状态，比如玩家回合或角色的生命值。</p><p>当你使用 SwiftUI 构建小组件时，虽然在呈现应用视图方面与常规方式有相似之处，但在开发小组件时有些方面是独特的。但是，并非所有 SwiftUI 视图都适用于小组件。要查看适用于小组件的视图列表，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/swiftui-views" target="_blank" rel="noreferrer">SwiftUI views for widgets</a>」。</p><h2 id="add-a-widget-target-to-your-app" tabindex="-1">Add a widget target to your app <a class="header-anchor" href="#add-a-widget-target-to-your-app" aria-label="Permalink to &quot;Add a widget target to your app&quot;">​</a></h2><p>在 Xcode 中创建小组件扩展的起始点是通过使用小组件扩展模板。该模板会创建一个包含单个小组件的扩展目标。随后，你可以向同一扩展中添加额外的小组件，以便展示不同类型的信息或支持其他尺寸的小组件。</p><p>具体操作步骤如下：</p><ol><li><p>打开你在 Xcode 中的应用项目，然后选择「文件」&gt;「新建」&gt;「目标」。</p></li><li><p>从「应用扩展」组中，选择「小组件扩展」，然后点击「下一步」。</p></li><li><p>输入你的扩展名称。</p></li><li><p>如果已选中的话，请取消勾选「包括实时活动」和「包括配置App意图」复选框。</p></li><li><p>点击「完成」。</p></li></ol><p>这样，Xcode 就会为你在项目中创建一个新的小组件扩展，你可以在此基础上编写代码来实现所需功能的小组件。</p><p><img src="'+l+`" alt="WidgetKit-Add-Widget-Extension@2x"></p><div class="info custom-block"><p class="custom-block-title">提示</p><p>实时活动利用 <code>WidgetKit</code> 技术，并且在设计与实现方面与你应用中的小组件共享许多相同特性。若你的应用支持实时活动，在添加小组件的同时，请考虑一并实现实时活动功能。关于实时活动的更多信息，请参阅「<a href="https://developer.apple.com/documentation/ActivityKit/displaying-live-data-with-live-activities" target="_blank" rel="noreferrer">Displaying live data with Live Activities</a>」。</p></div><p>小组件扩展模板提供了符合Widget协议的基本实现。小组件的 <code>body</code> 属性决定了小组件所展示的内容类型。静态小组件在其 <code>body</code> 属性中使用 <code>StaticConfiguration</code>。其他类型的小组件配置包括：</p><ul><li><code>AppIntentConfiguration</code> 允许用户自定义，例如天气小组件需要输入城市邮编或邮政编码，或者包裹跟踪小组件需要输入追踪号码。</li><li><code>ActivityConfiguration</code> 用于展示实时数据，如体育赛事中的比分更新或食物配送预计到达时间等。</li></ul><p>欲了解更多关于这些其他小组件配置的信息，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/making-a-configurable-widget" target="_blank" rel="noreferrer">Making a configurable widget</a>」以及「<a href="https://developer.apple.com/documentation/ActivityKit/displaying-live-data-with-live-activities" target="_blank" rel="noreferrer">Displaying live data with Live Activities</a>」。</p><h2 id="add-configuration-details" tabindex="-1">Add configuration details <a class="header-anchor" href="#add-configuration-details" aria-label="Permalink to &quot;Add configuration details&quot;">​</a></h2><p>为了配置一个静态小组件，你需要提供以下信息：</p><ul><li><code>kind</code>：一个字符串，用于标识小组件。这是由你自行选择的标识符，应具有描述小组件代表内容的功能。</li><li><code>provider</code>：一个遵循 <code>TimelineProvider</code> 协议的对象，该对象生成一个时间线，指示 <code>WidgetKit</code> 何时渲染小组件。时间线是一个序列，其中包含你自定义的 <code>TimelineEntry</code> 类型。该序列中的条目标识了你希望 <code>WidgetKit</code> 更新小组件内容的日期，并在自定义类型中包含了小组件视图渲染所需的各种属性。</li><li><code>content</code>：一个闭包，其中包含 SwiftUI 视图。<code>WidgetKit</code> 会调用这个闭包来渲染小组件的内容，并将来自 <code>provider</code> 的 <code>TimelineEntry</code> 参数传递给它。</li></ul><p>此外，你还可以使用修饰器来提供更多配置细节，包括显示名称、描述以及小组件支持的家族类型。以下代码展示了一个提供游戏一般状态信息的小组件示例：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@main</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GameStatusWidget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Widget </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WidgetConfiguration {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        StaticConfiguration</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            kind</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;com.mygame.game-status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            provider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">GameStatusProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(),</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ) { entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            GameStatusView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry.gameStatus)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">configurationDisplayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Game Status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Shows an overview of your game status&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">supportedFamilies</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([.systemSmall])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>小组件的 <code>provider</code> 会为小组件生成一个时间线，并在每个条目中包含游戏状态的具体详情。当时间线中每个条目的日期到达时，<code>WidgetKit</code> 会调用内容闭包来展示小组件的内容。最后，通过修饰器指定在小组件库中显示的名称和描述，以及小组件所支持的不同尺寸规格。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>若要使应用的小组件出现在小组件库中，用户必须在安装该应用后至少启动该应用一次。</p></div><p>请注意在这个小组件上使用的 <code>@main</code> 属性。这个属性表示 <code>GameStatusWidget</code> 是小组件扩展的入口点，意味着该扩展仅包含一个小组件。若要支持多个小组件，请参考 「<a href="https://developer.apple.com/documentation/SwiftUI/WidgetBundle" target="_blank" rel="noreferrer"><code>WidgetBundle</code></a>」。</p><h2 id="provide-timeline-entries" tabindex="-1">Provide timeline entries <a class="header-anchor" href="#provide-timeline-entries" aria-label="Permalink to &quot;Provide timeline entries&quot;">​</a></h2><p>你所定义的时间线提供者会生成一系列时间线条目。每个条目都指定了更新小组件内容的日期和时间，并包含了小组件渲染视图所需的数据。对于游戏状态小组件而言，它可以定义其时间线条目包含代表游戏状态的字符串，如下所示：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GameStatusEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimelineEntry </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date: Date</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameStatus: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><code>WidgetKit</code> 通过调用 <code>getTimeline(in:completion:)</code> 来从提供者那里请求时间线。该时间线由一个或多个时间线条目以及一个重载策略组成，这个策略用于告知 <code>WidgetKit</code> 何时应请求下一条时间线。</p>`,28),d={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},k={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.05ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.262ex",height:"1.557ex",role:"img",focusable:"false",viewBox:"0 -666 1000 688","aria-hidden":"true"},r=s('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z" style="stroke-width:3;"></path><path data-c="35" d="M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z" transform="translate(500,0)" style="stroke-width:3;"></path></g></g></g>',1),o=[r],g=i("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[i("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[i("mn",null,"15")])],-1),c=s(`<div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GameStatusProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimelineProvider </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getTimeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context: Context, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">completion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@escaping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Timeline&lt;GameStatusEntry&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create a timeline entry for &quot;now.&quot;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameStatusEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            gameStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gameStatusFromServer</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create a date that&#39;s 15 minutes in the future.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> nextUpdateDate </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Calendar.current.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">byAdding</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .minute, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Create the timeline with the entry and a reload policy with the date</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // for the next update.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> timeline </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            entries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:[entry],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            policy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">after</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(nextUpdateDate)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        )</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        // Call the completion to pass the timeline to WidgetKit.</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        completion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(timeline)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在这个示例中，如果小组件还未获取到服务器上的当前状态，它可以存储对完成处理程序的引用，执行异步请求以从服务器获取游戏状态，并在网络请求完成后调用该完成处理程序。</p><p>关于生成时间线的更多信息，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/keeping-a-widget-up-to-date" target="_blank" rel="noreferrer">Keeping a widget up to date</a>」。有关处理网络请求的更多信息，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/making-network-requests-in-a-widget-extension" target="_blank" rel="noreferrer">Making network requests in a widget extension</a>」。</p><h2 id="generate-a-preview-for-the-widget-gallery" tabindex="-1">Generate a preview for the widget gallery <a class="header-anchor" href="#generate-a-preview-for-the-widget-gallery" aria-label="Permalink to &quot;Generate a preview for the widget gallery&quot;">​</a></h2><p>为了让人们能够使用你的小组件，它需要在小组件库中可用。为了在小组件库中展示你的小组件，<code>WidgetKit</code> 会向提供者请求一个预览快照来显示通用数据。<code>WidgetKit</code> 通过调用提供者的 <code>getSnapshot(in:completion:)</code> 方法并设置上下文参数 <code>isPreview</code> 属性为 <code>true</code> 来进行这一请求。</p><p>作为响应，你需要快速创建预览快照。如果小组件通常需要花费较长时间生成或从服务器获取的资源或信息，这时应使用示例数据替代。</p><p>在以下代码中，游戏状态小组件的提供者实现了 <code>snapshot</code> 方法，当游戏状态可用时会显示状态信息，如果尚未从服务器获取到状态，则回退为空状态：</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">struct</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> GameStatusProvider</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TimelineProvider </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hasFetchedGameStatus: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Bool</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameStatusFromServer: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">String</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getSnapshot</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context: Context, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">completion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@escaping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (Entry) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> date </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> entry: GameStatusEntry</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> context.isPreview </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;&amp;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">hasFetchedGameStatus {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameStatusEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gameStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;—&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            entry </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameStatusEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: date, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">gameStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: gameStatusFromServer)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        completion</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(entry)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="display-content-in-your-widget" tabindex="-1">Display content in your widget <a class="header-anchor" href="#display-content-in-your-widget" aria-label="Permalink to &quot;Display content in your widget&quot;">​</a></h2><p>小组件使用 SwiftUI 视图来定义其内容，通常通过组合其他 SwiftUI 视图来完成。如「添加配置详情」部分所示，小组件的配置包含了 <code>WidgetKit</code> 调用来渲染小组件内容的闭包。</p><p>当用户从小组件库中添加你的小组件时，他们将从你小组件所支持的类型（例如小型或中型）中做出选择。小组件的内容闭包必须能够为该小组件所支持的所有类型进行渲染。<code>WidgetKit</code> 会在 SwiftUI 环境内设置相应的类型（家族样式）以及附加属性，比如颜色方案（浅色或深色）等。</p><p>在上述游戏状态小组件的配置中，内容闭包使用了 <code>GameStatusView</code> 来展示游戏状态。由于此小组件仅支持 <code>.systemSmall</code> 类型，因此它使用了一个组合的 <code>GameTurnSummary</code> SwiftUI 视图来显示游戏当前状态的摘要信息。对于任何其他尺寸的家族样式，它则显示默认视图，表明游戏状态不可用。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">truct GameStatusView </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> View</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.widgetFamily) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> family: WidgetFamily</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gameStatus: GameStatus</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> selectedCharacter: CharacterDetail</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    @ViewBuilder</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> body: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">some</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> View {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        switch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> family {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> .systemSmall</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameTurnSummary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(gameStatus)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        default:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> GameDetailsNotAvailable</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>在你的小组件中，随着你为小组件配置添加更多支持的家族样式，你需要在小组件视图的 <code>body</code> 属性中为每种新增的家族样式添加相应的额外情况处理。</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>该视图使用 <code>@ViewBuilder</code> 声明其 <code>body</code> 属性，因为其所使用的视图类型是可变的。</p></div><h2 id="display-a-placeholder-widget" tabindex="-1">Display a placeholder widget <a class="header-anchor" href="#display-a-placeholder-widget" aria-label="Permalink to &quot;Display a placeholder widget&quot;">​</a></h2><p>占位符视图类似于预览快照，但与显示示例数据以便让人们看到小组件所展示的数据类型不同，它显示的是一个无特定内容的通用视觉表示形式。当 <code>WidgetKit</code> 渲染你的小组件时，可能需要将其内容以占位符形式呈现，例如，在后台加载数据期间，或者当你告知系统小组件包含敏感信息时。</p><h2 id="hide-sensitive-content" tabindex="-1">Hide sensitive content <a class="header-anchor" href="#hide-sensitive-content" aria-label="Permalink to &quot;Hide sensitive content&quot;">​</a></h2><p>小组件和手表复杂功能可能会显示敏感信息，并且具有高度可见性，特别是在配备始终开启显示功能的设备上。当你创建小组件或手表复杂功能时，应审查其内容并考虑隐藏敏感信息。</p><p>为了让用户决定小组件是否应在锁定设备上显示敏感数据，你可以使用 <code>privacySensitive(_:)</code> 修饰符标记包含敏感信息的视图。在 iOS 中，用户可以在「设置」&gt;「面容ID与密码」下的「锁定屏幕时允许访问」部分配置小组件是否在锁定屏幕上以及始终开启状态下显示敏感数据。在 Apple Watch 上，用户可以通过选择「设置」&gt;「显示与亮度」&gt;「始终开启」&gt;「隐藏敏感复杂功能」，配置始终开启状态下是否显示敏感数据。他们可以选择为所有或单个复杂功能显示经过编辑的内容。</p><p>如果用户选择隐藏隐私敏感内容，<code>WidgetKit</code> 会根据你配置的占位符或编辑内容进行渲染。要配置编辑内容，请实现 <code>redacted(reason:)</code> 回调函数，读取 <code>privacy</code> 属性，并提供自定义占位符视图。你也可以通过使用 <code>unredacted()</code> 视图修饰符选择将视图作为未编辑内容进行渲染。</p><p>作为一种替代方案，如果你的小组件内容整体上都包含隐私敏感信息，可以向小组件扩展程序添加数据保护功能。在用户解锁设备以匹配你选择的隐私级别之前，<code>WidgetKit</code> 将显示占位符而非小组件内容。首先，在 Xcode 中为你的小组件扩展程序启用数据保护功能，然后将数据保护权限 <code>Entitlement</code> 设置为你希望提供的隐私级别对应的值：</p><ul><li><code>NSFileProtectionComplete</code>：当设备被锁定时，<code>WidgetKit</code> 会隐藏小组件内容。此外，iOS 小组件不会在 Mac 上作为 iPhone 小组件可用。</li><li><code>NSFileProtectionCompleteUnlessOpen</code>：当设备被密码锁定时，<code>WidgetKit</code> 会隐藏小组件内容。此外，iOS 小组件不会在 Mac 上作为 iPhone 小组件可用。</li></ul><p>如果你为小组件扩展程序选择 <code>NSFileProtectionCompleteUntilFirstUserAuthentication</code> 或 <code>NSFileProtectionNone</code> 保护级别：</p><ul><li><code>WidgetKit</code> 将采用默认行为，在用户重启设备后首次验证身份前，显示占位符。</li><li>iOS 小组件可在 Mac上 作为 iPhone 小组件使用。</li></ul><h2 id="add-dynamic-content-to-your-widget" tabindex="-1">Add dynamic content to your widget <a class="header-anchor" href="#add-dynamic-content-to-your-widget" aria-label="Permalink to &quot;Add dynamic content to your widget&quot;">​</a></h2><p>小组件通常仅展示只读信息，一般不支持滚动列表或文本输入等交互元素。但从 iOS 17 和 macOS 14 开始，小组件开始支持一些交互元素和动画效果。有关如何向小组件添加交互性的详细信息，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/adding-interactivity-to-widgets-and-live-activities" target="_blank" rel="noreferrer">Adding interactivity to widgets and Live Activities</a>」。</p><p>欲了解 <code>WidgetKit</code> 支持的一系列视图，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/swiftui-views" target="_blank" rel="noreferrer">SwiftUI views for widgets</a>」。当 <code>WidgetKit</code> 渲染小组件内容时，会忽略其他视图。</p><p>尽管小组件的显示基于视图的快照，但你仍然可以使用各种 SwiftUI 视图，即使在小组件可见时它们也能持续更新。有关提供动态内容的更多信息，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/keeping-a-widget-up-to-date" target="_blank" rel="noreferrer">Keeping a widget up to date.</a>」。</p><h2 id="respond-to-user-interactions" tabindex="-1">Respond to user interactions <a class="header-anchor" href="#respond-to-user-interactions" aria-label="Permalink to &quot;Respond to user interactions&quot;">​</a></h2><p>当用户与你的小组件进行交互，除了上述所述的交互元素之外，系统会启动你的应用程序来处理请求。一旦系统激活你的应用，应该导航至与小组件内容相对应的详细信息页面。你的小组件可以指定一个 <code>URL</code>，以便告知应用程序应当显示什么内容。</p><p>要在小组件中配置自定义 <code>URL</code>，请按照以下步骤操作：</p><p>对于所有类型的小组件，在你小组件视图层级中的任意视图上添加 <code>widgetURL(_:)</code> 视图修饰器。如果小组件视图层级中包含多个 <code>widgetURL</code> 修饰器，其行为将是未定义的。</p><p>对于使用 <code>WidgetFamily.systemMedium</code>、<code>WidgetFamily.systemLarge</code> 或 <code>WidgetFamily.systemExtraLarge</code> 类型的小组件，在小组件的视图层级中添加一个或多个 <code>Link</code> 控件。你可以同时使用 <code>widgetURL</code> 视图修饰器和 <code>Link</code> 控件。如果交互作用针对的是<code>Link</code>控件，则系统会使用该控件内的URL。而在小组件其余任何位置的交互作用中，系统则会使用 <code>widgetURL</code> 视图修饰器所指定的 <code>URL</code>。</p><p>若要了解更多关于如何从小组件链接至你的应用程序的具体场景，请参阅「<a href="https://developer.apple.com/documentation/widgetkit/linking-to-specific-app-scenes-from-your-widget-or-live-activity" target="_blank" rel="noreferrer">Linking to specific app scenes from your widget or Live Activity</a>」。</p><h2 id="preview-widgets-in-xcode" tabindex="-1">Preview widgets in Xcode <a class="header-anchor" href="#preview-widgets-in-xcode" aria-label="Permalink to &quot;Preview widgets in Xcode&quot;">​</a></h2><p>Xcode 允许你在不需在模拟器或测试设备上运行应用的情况下查看你的小组件预览。</p><p>以下示例展示了来自「<a href="https://developer.apple.com/documentation/widgetkit/building_widgets_using_widgetkit_and_swiftui" target="_blank" rel="noreferrer">Building Widgets Using WidgetKit and SwiftUI</a>」示例代码项目的 <code>Emoji Rangers</code> 小组件的预览代码。请注意，它如何利用 <code>widgetFamily</code> 环境值来避免手动为每个小组件指定名称。</p><div class="language-swift vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">swift</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">@Environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(\\.widgetFamily) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> family</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Group</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    EmojiRangerWidgetEntryView</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">entry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SimpleEntry</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">relevance</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">character</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .panda))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">previewContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WidgetPreviewContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">family</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: .systemSmall))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        .</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">previewDisplayName</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\\(family)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>随着你在小组件中支持更多类型的 <code>widget</code> 家族（如 <code>WidgetFamily.systemSmall</code>、<code>WidgetFamily.systemMedium</code> 等），你可以添加更多的预览视图，以便在一个预览界面中查看多种尺寸的表现形式。</p><h2 id="expand-your-widget-s-capabilities" tabindex="-1">Expand your widget’s capabilities <a class="header-anchor" href="#expand-your-widget-s-capabilities" aria-label="Permalink to &quot;Expand your widget’s capabilities&quot;">​</a></h2><p>为了给用户提供灵活访问你应用内容的方式，你可以支持额外的 <code>widget</code> 家族，添加更多类型的 <code>widget</code>，使你的小组件可由用户自定义配置，或者如果你的应用展示实时数据，还可以添加对 <code>Live Activities</code> 的支持。为了探索支持附加功能的计划，请参考「<a href="https://developer.apple.com/documentation/widgetkit/developing-a-widgetkit-strategy" target="_blank" rel="noreferrer">Developing a WidgetKit strategy</a>」。</p><p>首次接触 <code>WidgetKit</code> 代码时，可以参考以下示例代码项目：</p><ul><li><p><a href="https://developer.apple.com/documentation/widgetkit/building_widgets_using_widgetkit_and_swiftui" target="_blank" rel="noreferrer">Building Widgets Using WidgetKit and SwiftUI</a>：这是与 WWDC20 代码实践环节相关的示例代码项目，在此学习如何构建你的第一个小组件：</p><ul><li><a href="https://developer.apple.com/videos/play/wwdc2020/10034/" target="_blank" rel="noreferrer">Widgets Code-along, part 1: The adventure begins</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2020/10035/" target="_blank" rel="noreferrer">Widgets Code-along, part 2: Alternate timelines</a></li><li><a href="https://developer.apple.com/videos/play/wwdc2020/10036/" target="_blank" rel="noreferrer">Widgets Code-along, part 3: Advancing timelines</a></li></ul></li><li><p><a href="https://developer.apple.com/documentation/widgetkit/emoji-rangers-supporting-live-activities-interactivity-and-animations" target="_blank" rel="noreferrer">Emoji Rangers: Supporting Live Activities, interactivity, and animations</a>：支持 <code>Live Activities</code> 、交互性和动画：这个项目是在 <code>Emoji Rangers</code> 示例代码项目基础上拓展的，包含了锁屏小组件、<code>Live Activities</code>、交互性和动画等功能。</p></li><li><p><a href="https://developer.apple.com/documentation/swiftui/fruta_building_a_feature-rich_app_with_swiftui" target="_blank" rel="noreferrer">Fruta: Building a Feature-Rich App with SwiftUI</a> 和 <a href="https://developer.apple.com/documentation/SwiftUI/Backyard-birds-sample" target="_blank" rel="noreferrer">Backyard Birds: Building an app with SwiftData and widgets</a>：使用 <code>SwiftData</code> 和小组件构建应用的两个示例代码项目，除了支持小组件外，还支持 <code>App Clips</code> 等其他技术。</p></li></ul><h2 id="create-multiple-widget-extensions" tabindex="-1">Create multiple widget extensions <a class="header-anchor" href="#create-multiple-widget-extensions" aria-label="Permalink to &quot;Create multiple widget extensions&quot;">​</a></h2><p>在你的小组件扩展程序中，你可以包含多种类型的小组件，尽管你的应用程序中可以包含多个扩展程序。例如，如果你的一些小组件使用位置信息，而其他小组件则不使用，那么请将使用位置信息的小组件放在单独的扩展中。这样，系统就能仅针对使用位置信息的小组件所在的扩展程序向用户请求位置信息授权。有关如何在一个扩展中打包多个小组件的详细信息，请参阅 <a href="https://developer.apple.com/documentation/SwiftUI/WidgetBundle" target="_blank" rel="noreferrer">WidgetBundle</a>。</p>`,46);function E(y,u,m,F,w,C){return t(),a("div",null,[h,i("p",null,[e("下面的例子展示了游戏状态小组件的提供者如何生成一个包含来自服务器当前游戏状态的单一时间线条目，以及一个在 "),i("mjx-container",d,[(t(),a("svg",k,o)),g]),e(" 分钟后请求新时间线的重载策略：")]),c])}const _=n(p,[["render",E]]);export{f as __pageData,_ as default};
