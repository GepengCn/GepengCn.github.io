import{_ as i,c as t,o as a,a4 as e}from"./chunks/framework.C7sZLB-2.js";const u=JSON.parse('{"title":"Animations","description":"","frontmatter":{},"headers":[],"relativePath":"swiftui/animations/index.md","filePath":"swiftui/animations/index.md","lastUpdated":1715310960000}'),n={name:"swiftui/animations/index.md"},o=e('<h1 id="animations" tabindex="-1">Animations <a class="header-anchor" href="#animations" aria-label="Permalink to &quot;Animations&quot;">​</a></h1><p>根据状态变化创建平滑的视觉更新。</p><p>通过 SwiftUI 来定义应用程序用户界面在不同状态下的呈现方式，并随后依赖于 SwiftUI 在状态发生改变时自动更新界面。</p><p>为了避免状态改变时出现突兀的视觉过渡，可以通过以下任一方式添加动画效果：</p><ul><li>通过在 <code>withAnimation(_:duration:)</code> 全局函数的调用内部更改状态，来实现状态变更时所有视觉变化的动画效果。</li><li>当特定值发生变化时，向受影响的视图应用 <code>animation(_:value:)</code> 视图修饰符，从而为该特定视图添加动画。</li><li>通过使用绑定（ <code>Binding</code> ）的 <code>animation(_:)</code> 方法，对绑定值的变化进行动画处理。</li></ul><p>SwiftUI 自动为许多内置视图修改器产生的效果添加动画，例如那些设置缩放比例或透明度值的修改器。你还可以通过使自定义视图遵循 <code>Animatable</code> 协议，并告知 SwiftUI 你想要动画化的值，来对其他值进行动画处理。</p><p>当一个带有动画的状态变更导致视图层级中添加或移除视图时，你可以使用 <code>AnyTransition</code> 定义的内置过渡效果（如滑动或缩放）来指导 SwiftUI 如何使视图平滑地进入或退出位置。此外，你还可以创建自定义过渡效果。</p>',7),d=[o];function s(c,_,r,l,m,p){return a(),t("div",null,d)}const h=i(n,[["render",s]]);export{u as __pageData,h as default};
